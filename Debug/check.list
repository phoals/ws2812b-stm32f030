
check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005760  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b54  08005b54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b54  08005b54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000000c  08005b68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005b68  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c46  00000000  00000000  0002e01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100f8  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deb6  00000000  00000000  000414a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063aa9  00000000  00000000  0004f356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b2dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  000b2e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005808 	.word	0x08005808

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005808 	.word	0x08005808

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f000 fea5 	bl	8000f9c <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f000 fe0f 	bl	8000e7c <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fa76 	bl	8000758 <__aeabi_dsub>
 800026c:	f000 fe06 	bl	8000e7c <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_dmul>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	4698      	mov	r8, r3
 800028e:	030c      	lsls	r4, r1, #12
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	0006      	movs	r6, r0
 8000294:	4692      	mov	sl, r2
 8000296:	b087      	sub	sp, #28
 8000298:	0b24      	lsrs	r4, r4, #12
 800029a:	0d5b      	lsrs	r3, r3, #21
 800029c:	0fcf      	lsrs	r7, r1, #31
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d06c      	beq.n	800037c <__aeabi_dmul+0xfc>
 80002a2:	4add      	ldr	r2, [pc, #884]	; (8000618 <__aeabi_dmul+0x398>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d100      	bne.n	80002aa <__aeabi_dmul+0x2a>
 80002a8:	e086      	b.n	80003b8 <__aeabi_dmul+0x138>
 80002aa:	0f42      	lsrs	r2, r0, #29
 80002ac:	00e4      	lsls	r4, r4, #3
 80002ae:	4314      	orrs	r4, r2
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0412      	lsls	r2, r2, #16
 80002b4:	4314      	orrs	r4, r2
 80002b6:	4ad9      	ldr	r2, [pc, #868]	; (800061c <__aeabi_dmul+0x39c>)
 80002b8:	00c5      	lsls	r5, r0, #3
 80002ba:	4694      	mov	ip, r2
 80002bc:	4463      	add	r3, ip
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2300      	movs	r3, #0
 80002c2:	4699      	mov	r9, r3
 80002c4:	469b      	mov	fp, r3
 80002c6:	4643      	mov	r3, r8
 80002c8:	4642      	mov	r2, r8
 80002ca:	031e      	lsls	r6, r3, #12
 80002cc:	0fd2      	lsrs	r2, r2, #31
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4650      	mov	r0, sl
 80002d2:	4690      	mov	r8, r2
 80002d4:	0b36      	lsrs	r6, r6, #12
 80002d6:	0d5b      	lsrs	r3, r3, #21
 80002d8:	d100      	bne.n	80002dc <__aeabi_dmul+0x5c>
 80002da:	e078      	b.n	80003ce <__aeabi_dmul+0x14e>
 80002dc:	4ace      	ldr	r2, [pc, #824]	; (8000618 <__aeabi_dmul+0x398>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d01d      	beq.n	800031e <__aeabi_dmul+0x9e>
 80002e2:	49ce      	ldr	r1, [pc, #824]	; (800061c <__aeabi_dmul+0x39c>)
 80002e4:	0f42      	lsrs	r2, r0, #29
 80002e6:	468c      	mov	ip, r1
 80002e8:	9900      	ldr	r1, [sp, #0]
 80002ea:	4463      	add	r3, ip
 80002ec:	00f6      	lsls	r6, r6, #3
 80002ee:	468c      	mov	ip, r1
 80002f0:	4316      	orrs	r6, r2
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	449c      	add	ip, r3
 80002f6:	0412      	lsls	r2, r2, #16
 80002f8:	4663      	mov	r3, ip
 80002fa:	4316      	orrs	r6, r2
 80002fc:	00c2      	lsls	r2, r0, #3
 80002fe:	2000      	movs	r0, #0
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	9900      	ldr	r1, [sp, #0]
 8000304:	4643      	mov	r3, r8
 8000306:	3101      	adds	r1, #1
 8000308:	468c      	mov	ip, r1
 800030a:	4649      	mov	r1, r9
 800030c:	407b      	eors	r3, r7
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	290f      	cmp	r1, #15
 8000312:	d900      	bls.n	8000316 <__aeabi_dmul+0x96>
 8000314:	e07e      	b.n	8000414 <__aeabi_dmul+0x194>
 8000316:	4bc2      	ldr	r3, [pc, #776]	; (8000620 <__aeabi_dmul+0x3a0>)
 8000318:	0089      	lsls	r1, r1, #2
 800031a:	5859      	ldr	r1, [r3, r1]
 800031c:	468f      	mov	pc, r1
 800031e:	4652      	mov	r2, sl
 8000320:	9b00      	ldr	r3, [sp, #0]
 8000322:	4332      	orrs	r2, r6
 8000324:	d000      	beq.n	8000328 <__aeabi_dmul+0xa8>
 8000326:	e156      	b.n	80005d6 <__aeabi_dmul+0x356>
 8000328:	49bb      	ldr	r1, [pc, #748]	; (8000618 <__aeabi_dmul+0x398>)
 800032a:	2600      	movs	r6, #0
 800032c:	468c      	mov	ip, r1
 800032e:	4463      	add	r3, ip
 8000330:	4649      	mov	r1, r9
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2302      	movs	r3, #2
 8000336:	4319      	orrs	r1, r3
 8000338:	4689      	mov	r9, r1
 800033a:	2002      	movs	r0, #2
 800033c:	e7e1      	b.n	8000302 <__aeabi_dmul+0x82>
 800033e:	4643      	mov	r3, r8
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	0034      	movs	r4, r6
 8000344:	0015      	movs	r5, r2
 8000346:	4683      	mov	fp, r0
 8000348:	465b      	mov	r3, fp
 800034a:	2b02      	cmp	r3, #2
 800034c:	d05e      	beq.n	800040c <__aeabi_dmul+0x18c>
 800034e:	2b03      	cmp	r3, #3
 8000350:	d100      	bne.n	8000354 <__aeabi_dmul+0xd4>
 8000352:	e1f3      	b.n	800073c <__aeabi_dmul+0x4bc>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d000      	beq.n	800035a <__aeabi_dmul+0xda>
 8000358:	e118      	b.n	800058c <__aeabi_dmul+0x30c>
 800035a:	2200      	movs	r2, #0
 800035c:	2400      	movs	r4, #0
 800035e:	2500      	movs	r5, #0
 8000360:	9b01      	ldr	r3, [sp, #4]
 8000362:	0512      	lsls	r2, r2, #20
 8000364:	4322      	orrs	r2, r4
 8000366:	07db      	lsls	r3, r3, #31
 8000368:	431a      	orrs	r2, r3
 800036a:	0028      	movs	r0, r5
 800036c:	0011      	movs	r1, r2
 800036e:	b007      	add	sp, #28
 8000370:	bcf0      	pop	{r4, r5, r6, r7}
 8000372:	46bb      	mov	fp, r7
 8000374:	46b2      	mov	sl, r6
 8000376:	46a9      	mov	r9, r5
 8000378:	46a0      	mov	r8, r4
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037c:	0025      	movs	r5, r4
 800037e:	4305      	orrs	r5, r0
 8000380:	d100      	bne.n	8000384 <__aeabi_dmul+0x104>
 8000382:	e141      	b.n	8000608 <__aeabi_dmul+0x388>
 8000384:	2c00      	cmp	r4, #0
 8000386:	d100      	bne.n	800038a <__aeabi_dmul+0x10a>
 8000388:	e1ad      	b.n	80006e6 <__aeabi_dmul+0x466>
 800038a:	0020      	movs	r0, r4
 800038c:	f000 fe10 	bl	8000fb0 <__clzsi2>
 8000390:	0001      	movs	r1, r0
 8000392:	0002      	movs	r2, r0
 8000394:	390b      	subs	r1, #11
 8000396:	231d      	movs	r3, #29
 8000398:	0010      	movs	r0, r2
 800039a:	1a5b      	subs	r3, r3, r1
 800039c:	0031      	movs	r1, r6
 800039e:	0035      	movs	r5, r6
 80003a0:	3808      	subs	r0, #8
 80003a2:	4084      	lsls	r4, r0
 80003a4:	40d9      	lsrs	r1, r3
 80003a6:	4085      	lsls	r5, r0
 80003a8:	430c      	orrs	r4, r1
 80003aa:	489e      	ldr	r0, [pc, #632]	; (8000624 <__aeabi_dmul+0x3a4>)
 80003ac:	1a83      	subs	r3, r0, r2
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	4699      	mov	r9, r3
 80003b4:	469b      	mov	fp, r3
 80003b6:	e786      	b.n	80002c6 <__aeabi_dmul+0x46>
 80003b8:	0005      	movs	r5, r0
 80003ba:	4325      	orrs	r5, r4
 80003bc:	d000      	beq.n	80003c0 <__aeabi_dmul+0x140>
 80003be:	e11c      	b.n	80005fa <__aeabi_dmul+0x37a>
 80003c0:	2208      	movs	r2, #8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2302      	movs	r3, #2
 80003c6:	2400      	movs	r4, #0
 80003c8:	4691      	mov	r9, r2
 80003ca:	469b      	mov	fp, r3
 80003cc:	e77b      	b.n	80002c6 <__aeabi_dmul+0x46>
 80003ce:	4652      	mov	r2, sl
 80003d0:	4332      	orrs	r2, r6
 80003d2:	d100      	bne.n	80003d6 <__aeabi_dmul+0x156>
 80003d4:	e10a      	b.n	80005ec <__aeabi_dmul+0x36c>
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_dmul+0x15c>
 80003da:	e176      	b.n	80006ca <__aeabi_dmul+0x44a>
 80003dc:	0030      	movs	r0, r6
 80003de:	f000 fde7 	bl	8000fb0 <__clzsi2>
 80003e2:	0002      	movs	r2, r0
 80003e4:	3a0b      	subs	r2, #11
 80003e6:	231d      	movs	r3, #29
 80003e8:	0001      	movs	r1, r0
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	4652      	mov	r2, sl
 80003ee:	3908      	subs	r1, #8
 80003f0:	40da      	lsrs	r2, r3
 80003f2:	408e      	lsls	r6, r1
 80003f4:	4316      	orrs	r6, r2
 80003f6:	4652      	mov	r2, sl
 80003f8:	408a      	lsls	r2, r1
 80003fa:	9b00      	ldr	r3, [sp, #0]
 80003fc:	4989      	ldr	r1, [pc, #548]	; (8000624 <__aeabi_dmul+0x3a4>)
 80003fe:	1a18      	subs	r0, r3, r0
 8000400:	0003      	movs	r3, r0
 8000402:	468c      	mov	ip, r1
 8000404:	4463      	add	r3, ip
 8000406:	2000      	movs	r0, #0
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	e77a      	b.n	8000302 <__aeabi_dmul+0x82>
 800040c:	2400      	movs	r4, #0
 800040e:	2500      	movs	r5, #0
 8000410:	4a81      	ldr	r2, [pc, #516]	; (8000618 <__aeabi_dmul+0x398>)
 8000412:	e7a5      	b.n	8000360 <__aeabi_dmul+0xe0>
 8000414:	0c2f      	lsrs	r7, r5, #16
 8000416:	042d      	lsls	r5, r5, #16
 8000418:	0c2d      	lsrs	r5, r5, #16
 800041a:	002b      	movs	r3, r5
 800041c:	0c11      	lsrs	r1, r2, #16
 800041e:	0412      	lsls	r2, r2, #16
 8000420:	0c12      	lsrs	r2, r2, #16
 8000422:	4353      	muls	r3, r2
 8000424:	4698      	mov	r8, r3
 8000426:	0013      	movs	r3, r2
 8000428:	0028      	movs	r0, r5
 800042a:	437b      	muls	r3, r7
 800042c:	4699      	mov	r9, r3
 800042e:	4348      	muls	r0, r1
 8000430:	4448      	add	r0, r9
 8000432:	4683      	mov	fp, r0
 8000434:	4640      	mov	r0, r8
 8000436:	000b      	movs	r3, r1
 8000438:	0c00      	lsrs	r0, r0, #16
 800043a:	4682      	mov	sl, r0
 800043c:	4658      	mov	r0, fp
 800043e:	437b      	muls	r3, r7
 8000440:	4450      	add	r0, sl
 8000442:	9302      	str	r3, [sp, #8]
 8000444:	4581      	cmp	r9, r0
 8000446:	d906      	bls.n	8000456 <__aeabi_dmul+0x1d6>
 8000448:	469a      	mov	sl, r3
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	025b      	lsls	r3, r3, #9
 800044e:	4699      	mov	r9, r3
 8000450:	44ca      	add	sl, r9
 8000452:	4653      	mov	r3, sl
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	0c03      	lsrs	r3, r0, #16
 8000458:	469b      	mov	fp, r3
 800045a:	4643      	mov	r3, r8
 800045c:	041b      	lsls	r3, r3, #16
 800045e:	0400      	lsls	r0, r0, #16
 8000460:	0c1b      	lsrs	r3, r3, #16
 8000462:	4698      	mov	r8, r3
 8000464:	0003      	movs	r3, r0
 8000466:	4443      	add	r3, r8
 8000468:	9304      	str	r3, [sp, #16]
 800046a:	0c33      	lsrs	r3, r6, #16
 800046c:	4699      	mov	r9, r3
 800046e:	002b      	movs	r3, r5
 8000470:	0436      	lsls	r6, r6, #16
 8000472:	0c36      	lsrs	r6, r6, #16
 8000474:	4373      	muls	r3, r6
 8000476:	4698      	mov	r8, r3
 8000478:	0033      	movs	r3, r6
 800047a:	437b      	muls	r3, r7
 800047c:	469a      	mov	sl, r3
 800047e:	464b      	mov	r3, r9
 8000480:	435d      	muls	r5, r3
 8000482:	435f      	muls	r7, r3
 8000484:	4643      	mov	r3, r8
 8000486:	4455      	add	r5, sl
 8000488:	0c18      	lsrs	r0, r3, #16
 800048a:	1940      	adds	r0, r0, r5
 800048c:	4582      	cmp	sl, r0
 800048e:	d903      	bls.n	8000498 <__aeabi_dmul+0x218>
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	025b      	lsls	r3, r3, #9
 8000494:	469a      	mov	sl, r3
 8000496:	4457      	add	r7, sl
 8000498:	0c05      	lsrs	r5, r0, #16
 800049a:	19eb      	adds	r3, r5, r7
 800049c:	9305      	str	r3, [sp, #20]
 800049e:	4643      	mov	r3, r8
 80004a0:	041d      	lsls	r5, r3, #16
 80004a2:	0c2d      	lsrs	r5, r5, #16
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	0c25      	lsrs	r5, r4, #16
 80004aa:	0424      	lsls	r4, r4, #16
 80004ac:	0c24      	lsrs	r4, r4, #16
 80004ae:	0027      	movs	r7, r4
 80004b0:	4357      	muls	r7, r2
 80004b2:	436a      	muls	r2, r5
 80004b4:	4690      	mov	r8, r2
 80004b6:	002a      	movs	r2, r5
 80004b8:	0c3b      	lsrs	r3, r7, #16
 80004ba:	469a      	mov	sl, r3
 80004bc:	434a      	muls	r2, r1
 80004be:	4361      	muls	r1, r4
 80004c0:	4441      	add	r1, r8
 80004c2:	4451      	add	r1, sl
 80004c4:	4483      	add	fp, r0
 80004c6:	4588      	cmp	r8, r1
 80004c8:	d903      	bls.n	80004d2 <__aeabi_dmul+0x252>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	025b      	lsls	r3, r3, #9
 80004ce:	4698      	mov	r8, r3
 80004d0:	4442      	add	r2, r8
 80004d2:	043f      	lsls	r7, r7, #16
 80004d4:	0c0b      	lsrs	r3, r1, #16
 80004d6:	0c3f      	lsrs	r7, r7, #16
 80004d8:	0409      	lsls	r1, r1, #16
 80004da:	19c9      	adds	r1, r1, r7
 80004dc:	0027      	movs	r7, r4
 80004de:	4698      	mov	r8, r3
 80004e0:	464b      	mov	r3, r9
 80004e2:	4377      	muls	r7, r6
 80004e4:	435c      	muls	r4, r3
 80004e6:	436e      	muls	r6, r5
 80004e8:	435d      	muls	r5, r3
 80004ea:	0c3b      	lsrs	r3, r7, #16
 80004ec:	4699      	mov	r9, r3
 80004ee:	19a4      	adds	r4, r4, r6
 80004f0:	444c      	add	r4, r9
 80004f2:	4442      	add	r2, r8
 80004f4:	9503      	str	r5, [sp, #12]
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d904      	bls.n	8000504 <__aeabi_dmul+0x284>
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	025b      	lsls	r3, r3, #9
 80004fe:	4698      	mov	r8, r3
 8000500:	4445      	add	r5, r8
 8000502:	9503      	str	r5, [sp, #12]
 8000504:	9b02      	ldr	r3, [sp, #8]
 8000506:	043f      	lsls	r7, r7, #16
 8000508:	445b      	add	r3, fp
 800050a:	001e      	movs	r6, r3
 800050c:	4283      	cmp	r3, r0
 800050e:	4180      	sbcs	r0, r0
 8000510:	0423      	lsls	r3, r4, #16
 8000512:	4698      	mov	r8, r3
 8000514:	9b05      	ldr	r3, [sp, #20]
 8000516:	0c3f      	lsrs	r7, r7, #16
 8000518:	4447      	add	r7, r8
 800051a:	4698      	mov	r8, r3
 800051c:	1876      	adds	r6, r6, r1
 800051e:	428e      	cmp	r6, r1
 8000520:	4189      	sbcs	r1, r1
 8000522:	4447      	add	r7, r8
 8000524:	4240      	negs	r0, r0
 8000526:	183d      	adds	r5, r7, r0
 8000528:	46a8      	mov	r8, r5
 800052a:	4693      	mov	fp, r2
 800052c:	4249      	negs	r1, r1
 800052e:	468a      	mov	sl, r1
 8000530:	44c3      	add	fp, r8
 8000532:	429f      	cmp	r7, r3
 8000534:	41bf      	sbcs	r7, r7
 8000536:	4580      	cmp	r8, r0
 8000538:	4180      	sbcs	r0, r0
 800053a:	9b03      	ldr	r3, [sp, #12]
 800053c:	44da      	add	sl, fp
 800053e:	4698      	mov	r8, r3
 8000540:	4653      	mov	r3, sl
 8000542:	4240      	negs	r0, r0
 8000544:	427f      	negs	r7, r7
 8000546:	4307      	orrs	r7, r0
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	4593      	cmp	fp, r2
 800054c:	4192      	sbcs	r2, r2
 800054e:	458a      	cmp	sl, r1
 8000550:	4189      	sbcs	r1, r1
 8000552:	193f      	adds	r7, r7, r4
 8000554:	0ddc      	lsrs	r4, r3, #23
 8000556:	9b04      	ldr	r3, [sp, #16]
 8000558:	0275      	lsls	r5, r6, #9
 800055a:	431d      	orrs	r5, r3
 800055c:	1e68      	subs	r0, r5, #1
 800055e:	4185      	sbcs	r5, r0
 8000560:	4653      	mov	r3, sl
 8000562:	4252      	negs	r2, r2
 8000564:	4249      	negs	r1, r1
 8000566:	430a      	orrs	r2, r1
 8000568:	18bf      	adds	r7, r7, r2
 800056a:	4447      	add	r7, r8
 800056c:	0df6      	lsrs	r6, r6, #23
 800056e:	027f      	lsls	r7, r7, #9
 8000570:	4335      	orrs	r5, r6
 8000572:	025a      	lsls	r2, r3, #9
 8000574:	433c      	orrs	r4, r7
 8000576:	4315      	orrs	r5, r2
 8000578:	01fb      	lsls	r3, r7, #7
 800057a:	d400      	bmi.n	800057e <__aeabi_dmul+0x2fe>
 800057c:	e0c1      	b.n	8000702 <__aeabi_dmul+0x482>
 800057e:	2101      	movs	r1, #1
 8000580:	086a      	lsrs	r2, r5, #1
 8000582:	400d      	ands	r5, r1
 8000584:	4315      	orrs	r5, r2
 8000586:	07e2      	lsls	r2, r4, #31
 8000588:	4315      	orrs	r5, r2
 800058a:	0864      	lsrs	r4, r4, #1
 800058c:	4926      	ldr	r1, [pc, #152]	; (8000628 <__aeabi_dmul+0x3a8>)
 800058e:	4461      	add	r1, ip
 8000590:	2900      	cmp	r1, #0
 8000592:	dd56      	ble.n	8000642 <__aeabi_dmul+0x3c2>
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d009      	beq.n	80005ac <__aeabi_dmul+0x32c>
 8000598:	220f      	movs	r2, #15
 800059a:	402a      	ands	r2, r5
 800059c:	2a04      	cmp	r2, #4
 800059e:	d005      	beq.n	80005ac <__aeabi_dmul+0x32c>
 80005a0:	1d2a      	adds	r2, r5, #4
 80005a2:	42aa      	cmp	r2, r5
 80005a4:	41ad      	sbcs	r5, r5
 80005a6:	426d      	negs	r5, r5
 80005a8:	1964      	adds	r4, r4, r5
 80005aa:	0015      	movs	r5, r2
 80005ac:	01e3      	lsls	r3, r4, #7
 80005ae:	d504      	bpl.n	80005ba <__aeabi_dmul+0x33a>
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <__aeabi_dmul+0x3ac>)
 80005b4:	00c9      	lsls	r1, r1, #3
 80005b6:	4014      	ands	r4, r2
 80005b8:	4461      	add	r1, ip
 80005ba:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <__aeabi_dmul+0x3b0>)
 80005bc:	4291      	cmp	r1, r2
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dmul+0x342>
 80005c0:	e724      	b.n	800040c <__aeabi_dmul+0x18c>
 80005c2:	0762      	lsls	r2, r4, #29
 80005c4:	08ed      	lsrs	r5, r5, #3
 80005c6:	0264      	lsls	r4, r4, #9
 80005c8:	0549      	lsls	r1, r1, #21
 80005ca:	4315      	orrs	r5, r2
 80005cc:	0b24      	lsrs	r4, r4, #12
 80005ce:	0d4a      	lsrs	r2, r1, #21
 80005d0:	e6c6      	b.n	8000360 <__aeabi_dmul+0xe0>
 80005d2:	9701      	str	r7, [sp, #4]
 80005d4:	e6b8      	b.n	8000348 <__aeabi_dmul+0xc8>
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <__aeabi_dmul+0x398>)
 80005d8:	2003      	movs	r0, #3
 80005da:	4694      	mov	ip, r2
 80005dc:	4463      	add	r3, ip
 80005de:	464a      	mov	r2, r9
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2303      	movs	r3, #3
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4691      	mov	r9, r2
 80005e8:	4652      	mov	r2, sl
 80005ea:	e68a      	b.n	8000302 <__aeabi_dmul+0x82>
 80005ec:	4649      	mov	r1, r9
 80005ee:	2301      	movs	r3, #1
 80005f0:	4319      	orrs	r1, r3
 80005f2:	4689      	mov	r9, r1
 80005f4:	2600      	movs	r6, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	e683      	b.n	8000302 <__aeabi_dmul+0x82>
 80005fa:	220c      	movs	r2, #12
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2303      	movs	r3, #3
 8000600:	0005      	movs	r5, r0
 8000602:	4691      	mov	r9, r2
 8000604:	469b      	mov	fp, r3
 8000606:	e65e      	b.n	80002c6 <__aeabi_dmul+0x46>
 8000608:	2304      	movs	r3, #4
 800060a:	4699      	mov	r9, r3
 800060c:	2300      	movs	r3, #0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	2400      	movs	r4, #0
 8000614:	469b      	mov	fp, r3
 8000616:	e656      	b.n	80002c6 <__aeabi_dmul+0x46>
 8000618:	000007ff 	.word	0x000007ff
 800061c:	fffffc01 	.word	0xfffffc01
 8000620:	080059f8 	.word	0x080059f8
 8000624:	fffffc0d 	.word	0xfffffc0d
 8000628:	000003ff 	.word	0x000003ff
 800062c:	feffffff 	.word	0xfeffffff
 8000630:	000007fe 	.word	0x000007fe
 8000634:	2300      	movs	r3, #0
 8000636:	2480      	movs	r4, #128	; 0x80
 8000638:	2500      	movs	r5, #0
 800063a:	4a44      	ldr	r2, [pc, #272]	; (800074c <__aeabi_dmul+0x4cc>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	0324      	lsls	r4, r4, #12
 8000640:	e68e      	b.n	8000360 <__aeabi_dmul+0xe0>
 8000642:	2001      	movs	r0, #1
 8000644:	1a40      	subs	r0, r0, r1
 8000646:	2838      	cmp	r0, #56	; 0x38
 8000648:	dd00      	ble.n	800064c <__aeabi_dmul+0x3cc>
 800064a:	e686      	b.n	800035a <__aeabi_dmul+0xda>
 800064c:	281f      	cmp	r0, #31
 800064e:	dd5b      	ble.n	8000708 <__aeabi_dmul+0x488>
 8000650:	221f      	movs	r2, #31
 8000652:	0023      	movs	r3, r4
 8000654:	4252      	negs	r2, r2
 8000656:	1a51      	subs	r1, r2, r1
 8000658:	40cb      	lsrs	r3, r1
 800065a:	0019      	movs	r1, r3
 800065c:	2820      	cmp	r0, #32
 800065e:	d003      	beq.n	8000668 <__aeabi_dmul+0x3e8>
 8000660:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <__aeabi_dmul+0x4d0>)
 8000662:	4462      	add	r2, ip
 8000664:	4094      	lsls	r4, r2
 8000666:	4325      	orrs	r5, r4
 8000668:	1e6a      	subs	r2, r5, #1
 800066a:	4195      	sbcs	r5, r2
 800066c:	002a      	movs	r2, r5
 800066e:	430a      	orrs	r2, r1
 8000670:	2107      	movs	r1, #7
 8000672:	000d      	movs	r5, r1
 8000674:	2400      	movs	r4, #0
 8000676:	4015      	ands	r5, r2
 8000678:	4211      	tst	r1, r2
 800067a:	d05b      	beq.n	8000734 <__aeabi_dmul+0x4b4>
 800067c:	210f      	movs	r1, #15
 800067e:	2400      	movs	r4, #0
 8000680:	4011      	ands	r1, r2
 8000682:	2904      	cmp	r1, #4
 8000684:	d053      	beq.n	800072e <__aeabi_dmul+0x4ae>
 8000686:	1d11      	adds	r1, r2, #4
 8000688:	4291      	cmp	r1, r2
 800068a:	4192      	sbcs	r2, r2
 800068c:	4252      	negs	r2, r2
 800068e:	18a4      	adds	r4, r4, r2
 8000690:	000a      	movs	r2, r1
 8000692:	0223      	lsls	r3, r4, #8
 8000694:	d54b      	bpl.n	800072e <__aeabi_dmul+0x4ae>
 8000696:	2201      	movs	r2, #1
 8000698:	2400      	movs	r4, #0
 800069a:	2500      	movs	r5, #0
 800069c:	e660      	b.n	8000360 <__aeabi_dmul+0xe0>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	031b      	lsls	r3, r3, #12
 80006a2:	421c      	tst	r4, r3
 80006a4:	d009      	beq.n	80006ba <__aeabi_dmul+0x43a>
 80006a6:	421e      	tst	r6, r3
 80006a8:	d107      	bne.n	80006ba <__aeabi_dmul+0x43a>
 80006aa:	4333      	orrs	r3, r6
 80006ac:	031c      	lsls	r4, r3, #12
 80006ae:	4643      	mov	r3, r8
 80006b0:	0015      	movs	r5, r2
 80006b2:	0b24      	lsrs	r4, r4, #12
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <__aeabi_dmul+0x4cc>)
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	e652      	b.n	8000360 <__aeabi_dmul+0xe0>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	0312      	lsls	r2, r2, #12
 80006be:	4314      	orrs	r4, r2
 80006c0:	0324      	lsls	r4, r4, #12
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <__aeabi_dmul+0x4cc>)
 80006c4:	0b24      	lsrs	r4, r4, #12
 80006c6:	9701      	str	r7, [sp, #4]
 80006c8:	e64a      	b.n	8000360 <__aeabi_dmul+0xe0>
 80006ca:	f000 fc71 	bl	8000fb0 <__clzsi2>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	3215      	adds	r2, #21
 80006d4:	3020      	adds	r0, #32
 80006d6:	2a1c      	cmp	r2, #28
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_dmul+0x45c>
 80006da:	e684      	b.n	80003e6 <__aeabi_dmul+0x166>
 80006dc:	4656      	mov	r6, sl
 80006de:	3b08      	subs	r3, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	409e      	lsls	r6, r3
 80006e4:	e689      	b.n	80003fa <__aeabi_dmul+0x17a>
 80006e6:	f000 fc63 	bl	8000fb0 <__clzsi2>
 80006ea:	0001      	movs	r1, r0
 80006ec:	0002      	movs	r2, r0
 80006ee:	3115      	adds	r1, #21
 80006f0:	3220      	adds	r2, #32
 80006f2:	291c      	cmp	r1, #28
 80006f4:	dc00      	bgt.n	80006f8 <__aeabi_dmul+0x478>
 80006f6:	e64e      	b.n	8000396 <__aeabi_dmul+0x116>
 80006f8:	0034      	movs	r4, r6
 80006fa:	3808      	subs	r0, #8
 80006fc:	2500      	movs	r5, #0
 80006fe:	4084      	lsls	r4, r0
 8000700:	e653      	b.n	80003aa <__aeabi_dmul+0x12a>
 8000702:	9b00      	ldr	r3, [sp, #0]
 8000704:	469c      	mov	ip, r3
 8000706:	e741      	b.n	800058c <__aeabi_dmul+0x30c>
 8000708:	4912      	ldr	r1, [pc, #72]	; (8000754 <__aeabi_dmul+0x4d4>)
 800070a:	0022      	movs	r2, r4
 800070c:	4461      	add	r1, ip
 800070e:	002e      	movs	r6, r5
 8000710:	408d      	lsls	r5, r1
 8000712:	408a      	lsls	r2, r1
 8000714:	40c6      	lsrs	r6, r0
 8000716:	1e69      	subs	r1, r5, #1
 8000718:	418d      	sbcs	r5, r1
 800071a:	4332      	orrs	r2, r6
 800071c:	432a      	orrs	r2, r5
 800071e:	40c4      	lsrs	r4, r0
 8000720:	0753      	lsls	r3, r2, #29
 8000722:	d0b6      	beq.n	8000692 <__aeabi_dmul+0x412>
 8000724:	210f      	movs	r1, #15
 8000726:	4011      	ands	r1, r2
 8000728:	2904      	cmp	r1, #4
 800072a:	d1ac      	bne.n	8000686 <__aeabi_dmul+0x406>
 800072c:	e7b1      	b.n	8000692 <__aeabi_dmul+0x412>
 800072e:	0765      	lsls	r5, r4, #29
 8000730:	0264      	lsls	r4, r4, #9
 8000732:	0b24      	lsrs	r4, r4, #12
 8000734:	08d2      	lsrs	r2, r2, #3
 8000736:	4315      	orrs	r5, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e611      	b.n	8000360 <__aeabi_dmul+0xe0>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0312      	lsls	r2, r2, #12
 8000740:	4314      	orrs	r4, r2
 8000742:	0324      	lsls	r4, r4, #12
 8000744:	4a01      	ldr	r2, [pc, #4]	; (800074c <__aeabi_dmul+0x4cc>)
 8000746:	0b24      	lsrs	r4, r4, #12
 8000748:	e60a      	b.n	8000360 <__aeabi_dmul+0xe0>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	000007ff 	.word	0x000007ff
 8000750:	0000043e 	.word	0x0000043e
 8000754:	0000041e 	.word	0x0000041e

08000758 <__aeabi_dsub>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	4657      	mov	r7, sl
 800075c:	464e      	mov	r6, r9
 800075e:	4645      	mov	r5, r8
 8000760:	46de      	mov	lr, fp
 8000762:	0004      	movs	r4, r0
 8000764:	b5e0      	push	{r5, r6, r7, lr}
 8000766:	001f      	movs	r7, r3
 8000768:	0010      	movs	r0, r2
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0f62      	lsrs	r2, r4, #29
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0fcd      	lsrs	r5, r1, #31
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	0339      	lsls	r1, r7, #12
 8000776:	4313      	orrs	r3, r2
 8000778:	0a49      	lsrs	r1, r1, #9
 800077a:	00e2      	lsls	r2, r4, #3
 800077c:	0f44      	lsrs	r4, r0, #29
 800077e:	4321      	orrs	r1, r4
 8000780:	4cc2      	ldr	r4, [pc, #776]	; (8000a8c <__aeabi_dsub+0x334>)
 8000782:	4691      	mov	r9, r2
 8000784:	4692      	mov	sl, r2
 8000786:	00c0      	lsls	r0, r0, #3
 8000788:	007a      	lsls	r2, r7, #1
 800078a:	4680      	mov	r8, r0
 800078c:	0d76      	lsrs	r6, r6, #21
 800078e:	0d52      	lsrs	r2, r2, #21
 8000790:	0fff      	lsrs	r7, r7, #31
 8000792:	42a2      	cmp	r2, r4
 8000794:	d100      	bne.n	8000798 <__aeabi_dsub+0x40>
 8000796:	e0b4      	b.n	8000902 <__aeabi_dsub+0x1aa>
 8000798:	2401      	movs	r4, #1
 800079a:	4067      	eors	r7, r4
 800079c:	46bb      	mov	fp, r7
 800079e:	42bd      	cmp	r5, r7
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dsub+0x4c>
 80007a2:	e088      	b.n	80008b6 <__aeabi_dsub+0x15e>
 80007a4:	1ab4      	subs	r4, r6, r2
 80007a6:	46a4      	mov	ip, r4
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dsub+0x56>
 80007ac:	e0b2      	b.n	8000914 <__aeabi_dsub+0x1bc>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dsub+0x5c>
 80007b2:	e0c5      	b.n	8000940 <__aeabi_dsub+0x1e8>
 80007b4:	4ab5      	ldr	r2, [pc, #724]	; (8000a8c <__aeabi_dsub+0x334>)
 80007b6:	4296      	cmp	r6, r2
 80007b8:	d100      	bne.n	80007bc <__aeabi_dsub+0x64>
 80007ba:	e28b      	b.n	8000cd4 <__aeabi_dsub+0x57c>
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	0412      	lsls	r2, r2, #16
 80007c0:	4311      	orrs	r1, r2
 80007c2:	4662      	mov	r2, ip
 80007c4:	2a38      	cmp	r2, #56	; 0x38
 80007c6:	dd00      	ble.n	80007ca <__aeabi_dsub+0x72>
 80007c8:	e1a1      	b.n	8000b0e <__aeabi_dsub+0x3b6>
 80007ca:	2a1f      	cmp	r2, #31
 80007cc:	dd00      	ble.n	80007d0 <__aeabi_dsub+0x78>
 80007ce:	e216      	b.n	8000bfe <__aeabi_dsub+0x4a6>
 80007d0:	2720      	movs	r7, #32
 80007d2:	000c      	movs	r4, r1
 80007d4:	1abf      	subs	r7, r7, r2
 80007d6:	40bc      	lsls	r4, r7
 80007d8:	0002      	movs	r2, r0
 80007da:	46a0      	mov	r8, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	40b8      	lsls	r0, r7
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	4644      	mov	r4, r8
 80007e4:	4314      	orrs	r4, r2
 80007e6:	0002      	movs	r2, r0
 80007e8:	1e50      	subs	r0, r2, #1
 80007ea:	4182      	sbcs	r2, r0
 80007ec:	4660      	mov	r0, ip
 80007ee:	40c1      	lsrs	r1, r0
 80007f0:	4322      	orrs	r2, r4
 80007f2:	1a5b      	subs	r3, r3, r1
 80007f4:	4649      	mov	r1, r9
 80007f6:	1a8c      	subs	r4, r1, r2
 80007f8:	45a1      	cmp	r9, r4
 80007fa:	4192      	sbcs	r2, r2
 80007fc:	4252      	negs	r2, r2
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	4698      	mov	r8, r3
 8000802:	4643      	mov	r3, r8
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dsub+0xb2>
 8000808:	e117      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 800080a:	4643      	mov	r3, r8
 800080c:	025b      	lsls	r3, r3, #9
 800080e:	0a5b      	lsrs	r3, r3, #9
 8000810:	4698      	mov	r8, r3
 8000812:	4643      	mov	r3, r8
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <__aeabi_dsub+0xc2>
 8000818:	e16c      	b.n	8000af4 <__aeabi_dsub+0x39c>
 800081a:	4640      	mov	r0, r8
 800081c:	f000 fbc8 	bl	8000fb0 <__clzsi2>
 8000820:	0002      	movs	r2, r0
 8000822:	3a08      	subs	r2, #8
 8000824:	2120      	movs	r1, #32
 8000826:	0020      	movs	r0, r4
 8000828:	4643      	mov	r3, r8
 800082a:	1a89      	subs	r1, r1, r2
 800082c:	4093      	lsls	r3, r2
 800082e:	40c8      	lsrs	r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	4303      	orrs	r3, r0
 8000834:	4296      	cmp	r6, r2
 8000836:	dd00      	ble.n	800083a <__aeabi_dsub+0xe2>
 8000838:	e157      	b.n	8000aea <__aeabi_dsub+0x392>
 800083a:	1b96      	subs	r6, r2, r6
 800083c:	1c71      	adds	r1, r6, #1
 800083e:	291f      	cmp	r1, #31
 8000840:	dd00      	ble.n	8000844 <__aeabi_dsub+0xec>
 8000842:	e1cb      	b.n	8000bdc <__aeabi_dsub+0x484>
 8000844:	2220      	movs	r2, #32
 8000846:	0018      	movs	r0, r3
 8000848:	0026      	movs	r6, r4
 800084a:	1a52      	subs	r2, r2, r1
 800084c:	4094      	lsls	r4, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	40ce      	lsrs	r6, r1
 8000852:	40cb      	lsrs	r3, r1
 8000854:	1e62      	subs	r2, r4, #1
 8000856:	4194      	sbcs	r4, r2
 8000858:	4330      	orrs	r0, r6
 800085a:	4698      	mov	r8, r3
 800085c:	2600      	movs	r6, #0
 800085e:	4304      	orrs	r4, r0
 8000860:	0763      	lsls	r3, r4, #29
 8000862:	d009      	beq.n	8000878 <__aeabi_dsub+0x120>
 8000864:	230f      	movs	r3, #15
 8000866:	4023      	ands	r3, r4
 8000868:	2b04      	cmp	r3, #4
 800086a:	d005      	beq.n	8000878 <__aeabi_dsub+0x120>
 800086c:	1d23      	adds	r3, r4, #4
 800086e:	42a3      	cmp	r3, r4
 8000870:	41a4      	sbcs	r4, r4
 8000872:	4264      	negs	r4, r4
 8000874:	44a0      	add	r8, r4
 8000876:	001c      	movs	r4, r3
 8000878:	4643      	mov	r3, r8
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	d400      	bmi.n	8000880 <__aeabi_dsub+0x128>
 800087e:	e0df      	b.n	8000a40 <__aeabi_dsub+0x2e8>
 8000880:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <__aeabi_dsub+0x334>)
 8000882:	3601      	adds	r6, #1
 8000884:	429e      	cmp	r6, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dsub+0x132>
 8000888:	e0fb      	b.n	8000a82 <__aeabi_dsub+0x32a>
 800088a:	4642      	mov	r2, r8
 800088c:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <__aeabi_dsub+0x338>)
 800088e:	08e4      	lsrs	r4, r4, #3
 8000890:	401a      	ands	r2, r3
 8000892:	0013      	movs	r3, r2
 8000894:	0571      	lsls	r1, r6, #21
 8000896:	0752      	lsls	r2, r2, #29
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	4322      	orrs	r2, r4
 800089c:	0b1b      	lsrs	r3, r3, #12
 800089e:	0d49      	lsrs	r1, r1, #21
 80008a0:	0509      	lsls	r1, r1, #20
 80008a2:	07ed      	lsls	r5, r5, #31
 80008a4:	4319      	orrs	r1, r3
 80008a6:	4329      	orrs	r1, r5
 80008a8:	0010      	movs	r0, r2
 80008aa:	bcf0      	pop	{r4, r5, r6, r7}
 80008ac:	46bb      	mov	fp, r7
 80008ae:	46b2      	mov	sl, r6
 80008b0:	46a9      	mov	r9, r5
 80008b2:	46a0      	mov	r8, r4
 80008b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b6:	1ab4      	subs	r4, r6, r2
 80008b8:	46a4      	mov	ip, r4
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	dd58      	ble.n	8000970 <__aeabi_dsub+0x218>
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dsub+0x16c>
 80008c2:	e09e      	b.n	8000a02 <__aeabi_dsub+0x2aa>
 80008c4:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <__aeabi_dsub+0x334>)
 80008c6:	4296      	cmp	r6, r2
 80008c8:	d100      	bne.n	80008cc <__aeabi_dsub+0x174>
 80008ca:	e13b      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0412      	lsls	r2, r2, #16
 80008d0:	4311      	orrs	r1, r2
 80008d2:	4662      	mov	r2, ip
 80008d4:	2a38      	cmp	r2, #56	; 0x38
 80008d6:	dd00      	ble.n	80008da <__aeabi_dsub+0x182>
 80008d8:	e0c1      	b.n	8000a5e <__aeabi_dsub+0x306>
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_dsub+0x188>
 80008de:	e1bb      	b.n	8000c58 <__aeabi_dsub+0x500>
 80008e0:	000c      	movs	r4, r1
 80008e2:	3a20      	subs	r2, #32
 80008e4:	40d4      	lsrs	r4, r2
 80008e6:	0022      	movs	r2, r4
 80008e8:	4664      	mov	r4, ip
 80008ea:	2c20      	cmp	r4, #32
 80008ec:	d004      	beq.n	80008f8 <__aeabi_dsub+0x1a0>
 80008ee:	2740      	movs	r7, #64	; 0x40
 80008f0:	1b3f      	subs	r7, r7, r4
 80008f2:	40b9      	lsls	r1, r7
 80008f4:	4308      	orrs	r0, r1
 80008f6:	4680      	mov	r8, r0
 80008f8:	4644      	mov	r4, r8
 80008fa:	1e61      	subs	r1, r4, #1
 80008fc:	418c      	sbcs	r4, r1
 80008fe:	4314      	orrs	r4, r2
 8000900:	e0b1      	b.n	8000a66 <__aeabi_dsub+0x30e>
 8000902:	000c      	movs	r4, r1
 8000904:	4304      	orrs	r4, r0
 8000906:	d02a      	beq.n	800095e <__aeabi_dsub+0x206>
 8000908:	46bb      	mov	fp, r7
 800090a:	42bd      	cmp	r5, r7
 800090c:	d02d      	beq.n	800096a <__aeabi_dsub+0x212>
 800090e:	4c61      	ldr	r4, [pc, #388]	; (8000a94 <__aeabi_dsub+0x33c>)
 8000910:	46a4      	mov	ip, r4
 8000912:	44b4      	add	ip, r6
 8000914:	4664      	mov	r4, ip
 8000916:	2c00      	cmp	r4, #0
 8000918:	d05c      	beq.n	80009d4 <__aeabi_dsub+0x27c>
 800091a:	1b94      	subs	r4, r2, r6
 800091c:	46a4      	mov	ip, r4
 800091e:	2e00      	cmp	r6, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_dsub+0x1cc>
 8000922:	e115      	b.n	8000b50 <__aeabi_dsub+0x3f8>
 8000924:	464d      	mov	r5, r9
 8000926:	431d      	orrs	r5, r3
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1d4>
 800092a:	e1c3      	b.n	8000cb4 <__aeabi_dsub+0x55c>
 800092c:	1e65      	subs	r5, r4, #1
 800092e:	2c01      	cmp	r4, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dsub+0x1dc>
 8000932:	e20c      	b.n	8000d4e <__aeabi_dsub+0x5f6>
 8000934:	4e55      	ldr	r6, [pc, #340]	; (8000a8c <__aeabi_dsub+0x334>)
 8000936:	42b4      	cmp	r4, r6
 8000938:	d100      	bne.n	800093c <__aeabi_dsub+0x1e4>
 800093a:	e1f8      	b.n	8000d2e <__aeabi_dsub+0x5d6>
 800093c:	46ac      	mov	ip, r5
 800093e:	e10e      	b.n	8000b5e <__aeabi_dsub+0x406>
 8000940:	000a      	movs	r2, r1
 8000942:	4302      	orrs	r2, r0
 8000944:	d100      	bne.n	8000948 <__aeabi_dsub+0x1f0>
 8000946:	e136      	b.n	8000bb6 <__aeabi_dsub+0x45e>
 8000948:	0022      	movs	r2, r4
 800094a:	3a01      	subs	r2, #1
 800094c:	2c01      	cmp	r4, #1
 800094e:	d100      	bne.n	8000952 <__aeabi_dsub+0x1fa>
 8000950:	e1c6      	b.n	8000ce0 <__aeabi_dsub+0x588>
 8000952:	4c4e      	ldr	r4, [pc, #312]	; (8000a8c <__aeabi_dsub+0x334>)
 8000954:	45a4      	cmp	ip, r4
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x202>
 8000958:	e0f4      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 800095a:	4694      	mov	ip, r2
 800095c:	e731      	b.n	80007c2 <__aeabi_dsub+0x6a>
 800095e:	2401      	movs	r4, #1
 8000960:	4067      	eors	r7, r4
 8000962:	46bb      	mov	fp, r7
 8000964:	42bd      	cmp	r5, r7
 8000966:	d000      	beq.n	800096a <__aeabi_dsub+0x212>
 8000968:	e71c      	b.n	80007a4 <__aeabi_dsub+0x4c>
 800096a:	4c4a      	ldr	r4, [pc, #296]	; (8000a94 <__aeabi_dsub+0x33c>)
 800096c:	46a4      	mov	ip, r4
 800096e:	44b4      	add	ip, r6
 8000970:	4664      	mov	r4, ip
 8000972:	2c00      	cmp	r4, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dsub+0x220>
 8000976:	e0cf      	b.n	8000b18 <__aeabi_dsub+0x3c0>
 8000978:	1b94      	subs	r4, r2, r6
 800097a:	46a4      	mov	ip, r4
 800097c:	2e00      	cmp	r6, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_dsub+0x22a>
 8000980:	e15c      	b.n	8000c3c <__aeabi_dsub+0x4e4>
 8000982:	4e42      	ldr	r6, [pc, #264]	; (8000a8c <__aeabi_dsub+0x334>)
 8000984:	42b2      	cmp	r2, r6
 8000986:	d100      	bne.n	800098a <__aeabi_dsub+0x232>
 8000988:	e1ec      	b.n	8000d64 <__aeabi_dsub+0x60c>
 800098a:	2680      	movs	r6, #128	; 0x80
 800098c:	0436      	lsls	r6, r6, #16
 800098e:	4333      	orrs	r3, r6
 8000990:	4664      	mov	r4, ip
 8000992:	2c38      	cmp	r4, #56	; 0x38
 8000994:	dd00      	ble.n	8000998 <__aeabi_dsub+0x240>
 8000996:	e1b3      	b.n	8000d00 <__aeabi_dsub+0x5a8>
 8000998:	2c1f      	cmp	r4, #31
 800099a:	dd00      	ble.n	800099e <__aeabi_dsub+0x246>
 800099c:	e238      	b.n	8000e10 <__aeabi_dsub+0x6b8>
 800099e:	2620      	movs	r6, #32
 80009a0:	1b36      	subs	r6, r6, r4
 80009a2:	001c      	movs	r4, r3
 80009a4:	40b4      	lsls	r4, r6
 80009a6:	464f      	mov	r7, r9
 80009a8:	46a0      	mov	r8, r4
 80009aa:	4664      	mov	r4, ip
 80009ac:	40e7      	lsrs	r7, r4
 80009ae:	4644      	mov	r4, r8
 80009b0:	433c      	orrs	r4, r7
 80009b2:	464f      	mov	r7, r9
 80009b4:	40b7      	lsls	r7, r6
 80009b6:	003e      	movs	r6, r7
 80009b8:	1e77      	subs	r7, r6, #1
 80009ba:	41be      	sbcs	r6, r7
 80009bc:	4334      	orrs	r4, r6
 80009be:	4666      	mov	r6, ip
 80009c0:	40f3      	lsrs	r3, r6
 80009c2:	18c9      	adds	r1, r1, r3
 80009c4:	1824      	adds	r4, r4, r0
 80009c6:	4284      	cmp	r4, r0
 80009c8:	419b      	sbcs	r3, r3
 80009ca:	425b      	negs	r3, r3
 80009cc:	4698      	mov	r8, r3
 80009ce:	0016      	movs	r6, r2
 80009d0:	4488      	add	r8, r1
 80009d2:	e04e      	b.n	8000a72 <__aeabi_dsub+0x31a>
 80009d4:	4a30      	ldr	r2, [pc, #192]	; (8000a98 <__aeabi_dsub+0x340>)
 80009d6:	1c74      	adds	r4, r6, #1
 80009d8:	4214      	tst	r4, r2
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x286>
 80009dc:	e0d6      	b.n	8000b8c <__aeabi_dsub+0x434>
 80009de:	464a      	mov	r2, r9
 80009e0:	431a      	orrs	r2, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dsub+0x290>
 80009e6:	e15b      	b.n	8000ca0 <__aeabi_dsub+0x548>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_dsub+0x296>
 80009ec:	e1a5      	b.n	8000d3a <__aeabi_dsub+0x5e2>
 80009ee:	000a      	movs	r2, r1
 80009f0:	4302      	orrs	r2, r0
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dsub+0x29e>
 80009f4:	e1bb      	b.n	8000d6e <__aeabi_dsub+0x616>
 80009f6:	464a      	mov	r2, r9
 80009f8:	0759      	lsls	r1, r3, #29
 80009fa:	08d2      	lsrs	r2, r2, #3
 80009fc:	430a      	orrs	r2, r1
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	e027      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000a02:	000a      	movs	r2, r1
 8000a04:	4302      	orrs	r2, r0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x2b2>
 8000a08:	e174      	b.n	8000cf4 <__aeabi_dsub+0x59c>
 8000a0a:	0022      	movs	r2, r4
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	2c01      	cmp	r4, #1
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dsub+0x2c6>
 8000a12:	4c1e      	ldr	r4, [pc, #120]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a14:	45a4      	cmp	ip, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dsub+0x2c2>
 8000a18:	e094      	b.n	8000b44 <__aeabi_dsub+0x3ec>
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	e759      	b.n	80008d2 <__aeabi_dsub+0x17a>
 8000a1e:	4448      	add	r0, r9
 8000a20:	4548      	cmp	r0, r9
 8000a22:	4192      	sbcs	r2, r2
 8000a24:	185b      	adds	r3, r3, r1
 8000a26:	4698      	mov	r8, r3
 8000a28:	0004      	movs	r4, r0
 8000a2a:	4252      	negs	r2, r2
 8000a2c:	4490      	add	r8, r2
 8000a2e:	4643      	mov	r3, r8
 8000a30:	2602      	movs	r6, #2
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	d500      	bpl.n	8000a38 <__aeabi_dsub+0x2e0>
 8000a36:	e0c4      	b.n	8000bc2 <__aeabi_dsub+0x46a>
 8000a38:	3e01      	subs	r6, #1
 8000a3a:	0763      	lsls	r3, r4, #29
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_dsub+0x2e8>
 8000a3e:	e711      	b.n	8000864 <__aeabi_dsub+0x10c>
 8000a40:	4643      	mov	r3, r8
 8000a42:	46b4      	mov	ip, r6
 8000a44:	0759      	lsls	r1, r3, #29
 8000a46:	08e2      	lsrs	r2, r4, #3
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	490f      	ldr	r1, [pc, #60]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a4e:	458c      	cmp	ip, r1
 8000a50:	d040      	beq.n	8000ad4 <__aeabi_dsub+0x37c>
 8000a52:	4661      	mov	r1, ip
 8000a54:	031b      	lsls	r3, r3, #12
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	0b1b      	lsrs	r3, r3, #12
 8000a5a:	0d49      	lsrs	r1, r1, #21
 8000a5c:	e720      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	000c      	movs	r4, r1
 8000a62:	1e61      	subs	r1, r4, #1
 8000a64:	418c      	sbcs	r4, r1
 8000a66:	444c      	add	r4, r9
 8000a68:	454c      	cmp	r4, r9
 8000a6a:	4192      	sbcs	r2, r2
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4498      	add	r8, r3
 8000a72:	4643      	mov	r3, r8
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	d5e0      	bpl.n	8000a3a <__aeabi_dsub+0x2e2>
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__aeabi_dsub+0x334>)
 8000a7a:	3601      	adds	r6, #1
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x32a>
 8000a80:	e09f      	b.n	8000bc2 <__aeabi_dsub+0x46a>
 8000a82:	0031      	movs	r1, r6
 8000a84:	2300      	movs	r3, #0
 8000a86:	2200      	movs	r2, #0
 8000a88:	e70a      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	fffff801 	.word	0xfffff801
 8000a98:	000007fe 	.word	0x000007fe
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dsub+0x34a>
 8000aa0:	e160      	b.n	8000d64 <__aeabi_dsub+0x60c>
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	4302      	orrs	r2, r0
 8000aa6:	d04d      	beq.n	8000b44 <__aeabi_dsub+0x3ec>
 8000aa8:	464a      	mov	r2, r9
 8000aaa:	075c      	lsls	r4, r3, #29
 8000aac:	08d2      	lsrs	r2, r2, #3
 8000aae:	4322      	orrs	r2, r4
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	0324      	lsls	r4, r4, #12
 8000ab6:	4223      	tst	r3, r4
 8000ab8:	d007      	beq.n	8000aca <__aeabi_dsub+0x372>
 8000aba:	08ce      	lsrs	r6, r1, #3
 8000abc:	4226      	tst	r6, r4
 8000abe:	d104      	bne.n	8000aca <__aeabi_dsub+0x372>
 8000ac0:	465d      	mov	r5, fp
 8000ac2:	0033      	movs	r3, r6
 8000ac4:	08c2      	lsrs	r2, r0, #3
 8000ac6:	0749      	lsls	r1, r1, #29
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	0f51      	lsrs	r1, r2, #29
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	08d2      	lsrs	r2, r2, #3
 8000ad0:	0749      	lsls	r1, r1, #29
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	4319      	orrs	r1, r3
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x384>
 8000ada:	e1c8      	b.n	8000e6e <__aeabi_dsub+0x716>
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0309      	lsls	r1, r1, #12
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	031b      	lsls	r3, r3, #12
 8000ae4:	49d5      	ldr	r1, [pc, #852]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000ae6:	0b1b      	lsrs	r3, r3, #12
 8000ae8:	e6da      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000aea:	49d5      	ldr	r1, [pc, #852]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000aec:	1ab6      	subs	r6, r6, r2
 8000aee:	400b      	ands	r3, r1
 8000af0:	4698      	mov	r8, r3
 8000af2:	e6b5      	b.n	8000860 <__aeabi_dsub+0x108>
 8000af4:	0020      	movs	r0, r4
 8000af6:	f000 fa5b 	bl	8000fb0 <__clzsi2>
 8000afa:	0002      	movs	r2, r0
 8000afc:	3218      	adds	r2, #24
 8000afe:	2a1f      	cmp	r2, #31
 8000b00:	dc00      	bgt.n	8000b04 <__aeabi_dsub+0x3ac>
 8000b02:	e68f      	b.n	8000824 <__aeabi_dsub+0xcc>
 8000b04:	0023      	movs	r3, r4
 8000b06:	3808      	subs	r0, #8
 8000b08:	4083      	lsls	r3, r0
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	e692      	b.n	8000834 <__aeabi_dsub+0xdc>
 8000b0e:	4308      	orrs	r0, r1
 8000b10:	0002      	movs	r2, r0
 8000b12:	1e50      	subs	r0, r2, #1
 8000b14:	4182      	sbcs	r2, r0
 8000b16:	e66d      	b.n	80007f4 <__aeabi_dsub+0x9c>
 8000b18:	4cca      	ldr	r4, [pc, #808]	; (8000e44 <__aeabi_dsub+0x6ec>)
 8000b1a:	1c72      	adds	r2, r6, #1
 8000b1c:	4222      	tst	r2, r4
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dsub+0x3ca>
 8000b20:	e0ad      	b.n	8000c7e <__aeabi_dsub+0x526>
 8000b22:	464a      	mov	r2, r9
 8000b24:	431a      	orrs	r2, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d1b8      	bne.n	8000a9c <__aeabi_dsub+0x344>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x3d8>
 8000b2e:	e158      	b.n	8000de2 <__aeabi_dsub+0x68a>
 8000b30:	000a      	movs	r2, r1
 8000b32:	4302      	orrs	r2, r0
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dsub+0x3e0>
 8000b36:	e159      	b.n	8000dec <__aeabi_dsub+0x694>
 8000b38:	464a      	mov	r2, r9
 8000b3a:	0759      	lsls	r1, r3, #29
 8000b3c:	08d2      	lsrs	r2, r2, #3
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	e786      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000b44:	464a      	mov	r2, r9
 8000b46:	0759      	lsls	r1, r3, #29
 8000b48:	08d2      	lsrs	r2, r2, #3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	e7c1      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000b50:	4dba      	ldr	r5, [pc, #744]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000b52:	42aa      	cmp	r2, r5
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dsub+0x400>
 8000b56:	e11e      	b.n	8000d96 <__aeabi_dsub+0x63e>
 8000b58:	2580      	movs	r5, #128	; 0x80
 8000b5a:	042d      	lsls	r5, r5, #16
 8000b5c:	432b      	orrs	r3, r5
 8000b5e:	4664      	mov	r4, ip
 8000b60:	2c38      	cmp	r4, #56	; 0x38
 8000b62:	dc5d      	bgt.n	8000c20 <__aeabi_dsub+0x4c8>
 8000b64:	2c1f      	cmp	r4, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dsub+0x412>
 8000b68:	e0d0      	b.n	8000d0c <__aeabi_dsub+0x5b4>
 8000b6a:	2520      	movs	r5, #32
 8000b6c:	4667      	mov	r7, ip
 8000b6e:	1b2d      	subs	r5, r5, r4
 8000b70:	464e      	mov	r6, r9
 8000b72:	001c      	movs	r4, r3
 8000b74:	40fe      	lsrs	r6, r7
 8000b76:	40ac      	lsls	r4, r5
 8000b78:	4334      	orrs	r4, r6
 8000b7a:	464e      	mov	r6, r9
 8000b7c:	40ae      	lsls	r6, r5
 8000b7e:	0035      	movs	r5, r6
 8000b80:	40fb      	lsrs	r3, r7
 8000b82:	1e6e      	subs	r6, r5, #1
 8000b84:	41b5      	sbcs	r5, r6
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	432c      	orrs	r4, r5
 8000b8a:	e04e      	b.n	8000c2a <__aeabi_dsub+0x4d2>
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	1a14      	subs	r4, r2, r0
 8000b90:	45a1      	cmp	r9, r4
 8000b92:	4192      	sbcs	r2, r2
 8000b94:	4252      	negs	r2, r2
 8000b96:	4690      	mov	r8, r2
 8000b98:	1a5f      	subs	r7, r3, r1
 8000b9a:	003a      	movs	r2, r7
 8000b9c:	4647      	mov	r7, r8
 8000b9e:	1bd2      	subs	r2, r2, r7
 8000ba0:	4690      	mov	r8, r2
 8000ba2:	0212      	lsls	r2, r2, #8
 8000ba4:	d500      	bpl.n	8000ba8 <__aeabi_dsub+0x450>
 8000ba6:	e08b      	b.n	8000cc0 <__aeabi_dsub+0x568>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	4322      	orrs	r2, r4
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_dsub+0x458>
 8000bae:	e630      	b.n	8000812 <__aeabi_dsub+0xba>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	e74d      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	0759      	lsls	r1, r3, #29
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	e744      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b9e      	ldr	r3, [pc, #632]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000bc6:	0861      	lsrs	r1, r4, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4014      	ands	r4, r2
 8000bd0:	430c      	orrs	r4, r1
 8000bd2:	07da      	lsls	r2, r3, #31
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4314      	orrs	r4, r2
 8000bda:	e641      	b.n	8000860 <__aeabi_dsub+0x108>
 8000bdc:	001a      	movs	r2, r3
 8000bde:	3e1f      	subs	r6, #31
 8000be0:	40f2      	lsrs	r2, r6
 8000be2:	0016      	movs	r6, r2
 8000be4:	2920      	cmp	r1, #32
 8000be6:	d003      	beq.n	8000bf0 <__aeabi_dsub+0x498>
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	1a51      	subs	r1, r2, r1
 8000bec:	408b      	lsls	r3, r1
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	1e62      	subs	r2, r4, #1
 8000bf2:	4194      	sbcs	r4, r2
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4334      	orrs	r4, r6
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	e71d      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000bfe:	000c      	movs	r4, r1
 8000c00:	3a20      	subs	r2, #32
 8000c02:	40d4      	lsrs	r4, r2
 8000c04:	0022      	movs	r2, r4
 8000c06:	4664      	mov	r4, ip
 8000c08:	2c20      	cmp	r4, #32
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_dsub+0x4be>
 8000c0c:	2740      	movs	r7, #64	; 0x40
 8000c0e:	1b3f      	subs	r7, r7, r4
 8000c10:	40b9      	lsls	r1, r7
 8000c12:	4308      	orrs	r0, r1
 8000c14:	4680      	mov	r8, r0
 8000c16:	4644      	mov	r4, r8
 8000c18:	1e61      	subs	r1, r4, #1
 8000c1a:	418c      	sbcs	r4, r1
 8000c1c:	4322      	orrs	r2, r4
 8000c1e:	e5e9      	b.n	80007f4 <__aeabi_dsub+0x9c>
 8000c20:	464c      	mov	r4, r9
 8000c22:	4323      	orrs	r3, r4
 8000c24:	001c      	movs	r4, r3
 8000c26:	1e63      	subs	r3, r4, #1
 8000c28:	419c      	sbcs	r4, r3
 8000c2a:	1b04      	subs	r4, r0, r4
 8000c2c:	42a0      	cmp	r0, r4
 8000c2e:	419b      	sbcs	r3, r3
 8000c30:	425b      	negs	r3, r3
 8000c32:	1acb      	subs	r3, r1, r3
 8000c34:	4698      	mov	r8, r3
 8000c36:	465d      	mov	r5, fp
 8000c38:	0016      	movs	r6, r2
 8000c3a:	e5e2      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dsub+0x4ec>
 8000c42:	e0ae      	b.n	8000da2 <__aeabi_dsub+0x64a>
 8000c44:	1e66      	subs	r6, r4, #1
 8000c46:	2c01      	cmp	r4, #1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dsub+0x4f4>
 8000c4a:	e0fd      	b.n	8000e48 <__aeabi_dsub+0x6f0>
 8000c4c:	4f7b      	ldr	r7, [pc, #492]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000c4e:	42bc      	cmp	r4, r7
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dsub+0x4fc>
 8000c52:	e107      	b.n	8000e64 <__aeabi_dsub+0x70c>
 8000c54:	46b4      	mov	ip, r6
 8000c56:	e69b      	b.n	8000990 <__aeabi_dsub+0x238>
 8000c58:	4664      	mov	r4, ip
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	1b12      	subs	r2, r2, r4
 8000c5e:	000c      	movs	r4, r1
 8000c60:	4094      	lsls	r4, r2
 8000c62:	0007      	movs	r7, r0
 8000c64:	4090      	lsls	r0, r2
 8000c66:	46a0      	mov	r8, r4
 8000c68:	4664      	mov	r4, ip
 8000c6a:	1e42      	subs	r2, r0, #1
 8000c6c:	4190      	sbcs	r0, r2
 8000c6e:	4662      	mov	r2, ip
 8000c70:	40e7      	lsrs	r7, r4
 8000c72:	4644      	mov	r4, r8
 8000c74:	40d1      	lsrs	r1, r2
 8000c76:	433c      	orrs	r4, r7
 8000c78:	4304      	orrs	r4, r0
 8000c7a:	185b      	adds	r3, r3, r1
 8000c7c:	e6f3      	b.n	8000a66 <__aeabi_dsub+0x30e>
 8000c7e:	4c6f      	ldr	r4, [pc, #444]	; (8000e3c <__aeabi_dsub+0x6e4>)
 8000c80:	42a2      	cmp	r2, r4
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x52e>
 8000c84:	e0d5      	b.n	8000e32 <__aeabi_dsub+0x6da>
 8000c86:	4448      	add	r0, r9
 8000c88:	185b      	adds	r3, r3, r1
 8000c8a:	4548      	cmp	r0, r9
 8000c8c:	4189      	sbcs	r1, r1
 8000c8e:	4249      	negs	r1, r1
 8000c90:	185b      	adds	r3, r3, r1
 8000c92:	07dc      	lsls	r4, r3, #31
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	4304      	orrs	r4, r0
 8000c9e:	e6cc      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dsub+0x54e>
 8000ca4:	e082      	b.n	8000dac <__aeabi_dsub+0x654>
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	d140      	bne.n	8000d2e <__aeabi_dsub+0x5d6>
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	2500      	movs	r5, #0
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	e713      	b.n	8000adc <__aeabi_dsub+0x384>
 8000cb4:	074b      	lsls	r3, r1, #29
 8000cb6:	08c2      	lsrs	r2, r0, #3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	465d      	mov	r5, fp
 8000cbc:	08cb      	lsrs	r3, r1, #3
 8000cbe:	e6c5      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a84      	subs	r4, r0, r2
 8000cc4:	42a0      	cmp	r0, r4
 8000cc6:	4192      	sbcs	r2, r2
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	4252      	negs	r2, r2
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	e59e      	b.n	8000812 <__aeabi_dsub+0xba>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	0759      	lsls	r1, r3, #29
 8000cd8:	08d2      	lsrs	r2, r2, #3
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	e6f9      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a14      	subs	r4, r2, r0
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	4192      	sbcs	r2, r2
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	4252      	negs	r2, r2
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	4698      	mov	r8, r3
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	e586      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000cf4:	464a      	mov	r2, r9
 8000cf6:	0759      	lsls	r1, r3, #29
 8000cf8:	08d2      	lsrs	r2, r2, #3
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	e6a5      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000d00:	464c      	mov	r4, r9
 8000d02:	4323      	orrs	r3, r4
 8000d04:	001c      	movs	r4, r3
 8000d06:	1e63      	subs	r3, r4, #1
 8000d08:	419c      	sbcs	r4, r3
 8000d0a:	e65b      	b.n	80009c4 <__aeabi_dsub+0x26c>
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	001e      	movs	r6, r3
 8000d10:	3d20      	subs	r5, #32
 8000d12:	40ee      	lsrs	r6, r5
 8000d14:	2c20      	cmp	r4, #32
 8000d16:	d005      	beq.n	8000d24 <__aeabi_dsub+0x5cc>
 8000d18:	2540      	movs	r5, #64	; 0x40
 8000d1a:	1b2d      	subs	r5, r5, r4
 8000d1c:	40ab      	lsls	r3, r5
 8000d1e:	464c      	mov	r4, r9
 8000d20:	431c      	orrs	r4, r3
 8000d22:	46a2      	mov	sl, r4
 8000d24:	4654      	mov	r4, sl
 8000d26:	1e63      	subs	r3, r4, #1
 8000d28:	419c      	sbcs	r4, r3
 8000d2a:	4334      	orrs	r4, r6
 8000d2c:	e77d      	b.n	8000c2a <__aeabi_dsub+0x4d2>
 8000d2e:	074b      	lsls	r3, r1, #29
 8000d30:	08c2      	lsrs	r2, r0, #3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	465d      	mov	r5, fp
 8000d36:	08cb      	lsrs	r3, r1, #3
 8000d38:	e6cc      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dsub+0x5ea>
 8000d40:	e736      	b.n	8000bb0 <__aeabi_dsub+0x458>
 8000d42:	074b      	lsls	r3, r1, #29
 8000d44:	08c2      	lsrs	r2, r0, #3
 8000d46:	431a      	orrs	r2, r3
 8000d48:	465d      	mov	r5, fp
 8000d4a:	08cb      	lsrs	r3, r1, #3
 8000d4c:	e681      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000d4e:	464a      	mov	r2, r9
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	42a0      	cmp	r0, r4
 8000d54:	4192      	sbcs	r2, r2
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	4252      	negs	r2, r2
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	465d      	mov	r5, fp
 8000d60:	2601      	movs	r6, #1
 8000d62:	e54e      	b.n	8000802 <__aeabi_dsub+0xaa>
 8000d64:	074b      	lsls	r3, r1, #29
 8000d66:	08c2      	lsrs	r2, r0, #3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	08cb      	lsrs	r3, r1, #3
 8000d6c:	e6b2      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000d6e:	464a      	mov	r2, r9
 8000d70:	1a14      	subs	r4, r2, r0
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	1a5f      	subs	r7, r3, r1
 8000d78:	4252      	negs	r2, r2
 8000d7a:	1aba      	subs	r2, r7, r2
 8000d7c:	4690      	mov	r8, r2
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	d56b      	bpl.n	8000e5a <__aeabi_dsub+0x702>
 8000d82:	464a      	mov	r2, r9
 8000d84:	1a84      	subs	r4, r0, r2
 8000d86:	42a0      	cmp	r0, r4
 8000d88:	4192      	sbcs	r2, r2
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	4252      	negs	r2, r2
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	4698      	mov	r8, r3
 8000d92:	465d      	mov	r5, fp
 8000d94:	e564      	b.n	8000860 <__aeabi_dsub+0x108>
 8000d96:	074b      	lsls	r3, r1, #29
 8000d98:	08c2      	lsrs	r2, r0, #3
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	465d      	mov	r5, fp
 8000d9e:	08cb      	lsrs	r3, r1, #3
 8000da0:	e698      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	08c2      	lsrs	r2, r0, #3
 8000da6:	431a      	orrs	r2, r3
 8000da8:	08cb      	lsrs	r3, r1, #3
 8000daa:	e64f      	b.n	8000a4c <__aeabi_dsub+0x2f4>
 8000dac:	000a      	movs	r2, r1
 8000dae:	4302      	orrs	r2, r0
 8000db0:	d090      	beq.n	8000cd4 <__aeabi_dsub+0x57c>
 8000db2:	464a      	mov	r2, r9
 8000db4:	075c      	lsls	r4, r3, #29
 8000db6:	08d2      	lsrs	r2, r2, #3
 8000db8:	4314      	orrs	r4, r2
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0312      	lsls	r2, r2, #12
 8000dc0:	4213      	tst	r3, r2
 8000dc2:	d008      	beq.n	8000dd6 <__aeabi_dsub+0x67e>
 8000dc4:	08ce      	lsrs	r6, r1, #3
 8000dc6:	4216      	tst	r6, r2
 8000dc8:	d105      	bne.n	8000dd6 <__aeabi_dsub+0x67e>
 8000dca:	08c0      	lsrs	r0, r0, #3
 8000dcc:	0749      	lsls	r1, r1, #29
 8000dce:	4308      	orrs	r0, r1
 8000dd0:	0004      	movs	r4, r0
 8000dd2:	465d      	mov	r5, fp
 8000dd4:	0033      	movs	r3, r6
 8000dd6:	0f61      	lsrs	r1, r4, #29
 8000dd8:	00e2      	lsls	r2, r4, #3
 8000dda:	0749      	lsls	r1, r1, #29
 8000ddc:	08d2      	lsrs	r2, r2, #3
 8000dde:	430a      	orrs	r2, r1
 8000de0:	e678      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000de2:	074b      	lsls	r3, r1, #29
 8000de4:	08c2      	lsrs	r2, r0, #3
 8000de6:	431a      	orrs	r2, r3
 8000de8:	08cb      	lsrs	r3, r1, #3
 8000dea:	e632      	b.n	8000a52 <__aeabi_dsub+0x2fa>
 8000dec:	4448      	add	r0, r9
 8000dee:	185b      	adds	r3, r3, r1
 8000df0:	4548      	cmp	r0, r9
 8000df2:	4192      	sbcs	r2, r2
 8000df4:	4698      	mov	r8, r3
 8000df6:	4252      	negs	r2, r2
 8000df8:	4490      	add	r8, r2
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	0004      	movs	r4, r0
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_dsub+0x6ac>
 8000e02:	e61a      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e04:	4642      	mov	r2, r8
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <__aeabi_dsub+0x6e8>)
 8000e08:	2601      	movs	r6, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	e614      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e10:	4666      	mov	r6, ip
 8000e12:	001f      	movs	r7, r3
 8000e14:	3e20      	subs	r6, #32
 8000e16:	40f7      	lsrs	r7, r6
 8000e18:	2c20      	cmp	r4, #32
 8000e1a:	d005      	beq.n	8000e28 <__aeabi_dsub+0x6d0>
 8000e1c:	2640      	movs	r6, #64	; 0x40
 8000e1e:	1b36      	subs	r6, r6, r4
 8000e20:	40b3      	lsls	r3, r6
 8000e22:	464c      	mov	r4, r9
 8000e24:	431c      	orrs	r4, r3
 8000e26:	46a2      	mov	sl, r4
 8000e28:	4654      	mov	r4, sl
 8000e2a:	1e63      	subs	r3, r4, #1
 8000e2c:	419c      	sbcs	r4, r3
 8000e2e:	433c      	orrs	r4, r7
 8000e30:	e5c8      	b.n	80009c4 <__aeabi_dsub+0x26c>
 8000e32:	0011      	movs	r1, r2
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	e532      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	000007ff 	.word	0x000007ff
 8000e40:	ff7fffff 	.word	0xff7fffff
 8000e44:	000007fe 	.word	0x000007fe
 8000e48:	464a      	mov	r2, r9
 8000e4a:	1814      	adds	r4, r2, r0
 8000e4c:	4284      	cmp	r4, r0
 8000e4e:	4192      	sbcs	r2, r2
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	4698      	mov	r8, r3
 8000e54:	4252      	negs	r2, r2
 8000e56:	4490      	add	r8, r2
 8000e58:	e5e9      	b.n	8000a2e <__aeabi_dsub+0x2d6>
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dsub+0x70a>
 8000e60:	e6a6      	b.n	8000bb0 <__aeabi_dsub+0x458>
 8000e62:	e5ea      	b.n	8000a3a <__aeabi_dsub+0x2e2>
 8000e64:	074b      	lsls	r3, r1, #29
 8000e66:	08c2      	lsrs	r2, r0, #3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	08cb      	lsrs	r3, r1, #3
 8000e6c:	e632      	b.n	8000ad4 <__aeabi_dsub+0x37c>
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4901      	ldr	r1, [pc, #4]	; (8000e78 <__aeabi_dsub+0x720>)
 8000e72:	0013      	movs	r3, r2
 8000e74:	e514      	b.n	80008a0 <__aeabi_dsub+0x148>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	000007ff 	.word	0x000007ff

08000e7c <__aeabi_d2iz>:
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	b530      	push	{r4, r5, lr}
 8000e80:	4c13      	ldr	r4, [pc, #76]	; (8000ed0 <__aeabi_d2iz+0x54>)
 8000e82:	0053      	lsls	r3, r2, #1
 8000e84:	0309      	lsls	r1, r1, #12
 8000e86:	0005      	movs	r5, r0
 8000e88:	0b09      	lsrs	r1, r1, #12
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	0d5b      	lsrs	r3, r3, #21
 8000e8e:	0fd2      	lsrs	r2, r2, #31
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	dd04      	ble.n	8000e9e <__aeabi_d2iz+0x22>
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <__aeabi_d2iz+0x58>)
 8000e96:	4283      	cmp	r3, r0
 8000e98:	dd02      	ble.n	8000ea0 <__aeabi_d2iz+0x24>
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <__aeabi_d2iz+0x5c>)
 8000e9c:	18d0      	adds	r0, r2, r3
 8000e9e:	bd30      	pop	{r4, r5, pc}
 8000ea0:	2080      	movs	r0, #128	; 0x80
 8000ea2:	0340      	lsls	r0, r0, #13
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <__aeabi_d2iz+0x60>)
 8000ea8:	1ac0      	subs	r0, r0, r3
 8000eaa:	281f      	cmp	r0, #31
 8000eac:	dd08      	ble.n	8000ec0 <__aeabi_d2iz+0x44>
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <__aeabi_d2iz+0x64>)
 8000eb0:	1ac3      	subs	r3, r0, r3
 8000eb2:	40d9      	lsrs	r1, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	4258      	negs	r0, r3
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f0      	bne.n	8000e9e <__aeabi_d2iz+0x22>
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	e7ee      	b.n	8000e9e <__aeabi_d2iz+0x22>
 8000ec0:	4c08      	ldr	r4, [pc, #32]	; (8000ee4 <__aeabi_d2iz+0x68>)
 8000ec2:	40c5      	lsrs	r5, r0
 8000ec4:	46a4      	mov	ip, r4
 8000ec6:	4463      	add	r3, ip
 8000ec8:	4099      	lsls	r1, r3
 8000eca:	000b      	movs	r3, r1
 8000ecc:	432b      	orrs	r3, r5
 8000ece:	e7f2      	b.n	8000eb6 <__aeabi_d2iz+0x3a>
 8000ed0:	000003fe 	.word	0x000003fe
 8000ed4:	0000041d 	.word	0x0000041d
 8000ed8:	7fffffff 	.word	0x7fffffff
 8000edc:	00000433 	.word	0x00000433
 8000ee0:	00000413 	.word	0x00000413
 8000ee4:	fffffbed 	.word	0xfffffbed

08000ee8 <__aeabi_ui2d>:
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	1e04      	subs	r4, r0, #0
 8000eec:	d010      	beq.n	8000f10 <__aeabi_ui2d+0x28>
 8000eee:	f000 f85f 	bl	8000fb0 <__clzsi2>
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <__aeabi_ui2d+0x48>)
 8000ef4:	1a1b      	subs	r3, r3, r0
 8000ef6:	280a      	cmp	r0, #10
 8000ef8:	dc11      	bgt.n	8000f1e <__aeabi_ui2d+0x36>
 8000efa:	220b      	movs	r2, #11
 8000efc:	0021      	movs	r1, r4
 8000efe:	1a12      	subs	r2, r2, r0
 8000f00:	40d1      	lsrs	r1, r2
 8000f02:	3015      	adds	r0, #21
 8000f04:	030a      	lsls	r2, r1, #12
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4084      	lsls	r4, r0
 8000f0a:	0b12      	lsrs	r2, r2, #12
 8000f0c:	0d5b      	lsrs	r3, r3, #21
 8000f0e:	e001      	b.n	8000f14 <__aeabi_ui2d+0x2c>
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	051b      	lsls	r3, r3, #20
 8000f16:	4313      	orrs	r3, r2
 8000f18:	0020      	movs	r0, r4
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	0022      	movs	r2, r4
 8000f20:	380b      	subs	r0, #11
 8000f22:	4082      	lsls	r2, r0
 8000f24:	055b      	lsls	r3, r3, #21
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	2400      	movs	r4, #0
 8000f2a:	0b12      	lsrs	r2, r2, #12
 8000f2c:	0d5b      	lsrs	r3, r3, #21
 8000f2e:	e7f1      	b.n	8000f14 <__aeabi_ui2d+0x2c>
 8000f30:	0000041e 	.word	0x0000041e

08000f34 <__aeabi_cdrcmple>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	1c10      	adds	r0, r2, #0
 8000f38:	4662      	mov	r2, ip
 8000f3a:	468c      	mov	ip, r1
 8000f3c:	1c19      	adds	r1, r3, #0
 8000f3e:	4663      	mov	r3, ip
 8000f40:	e000      	b.n	8000f44 <__aeabi_cdcmpeq>
 8000f42:	46c0      	nop			; (mov r8, r8)

08000f44 <__aeabi_cdcmpeq>:
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f46:	f000 f8ff 	bl	8001148 <__ledf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d401      	bmi.n	8000f52 <__aeabi_cdcmpeq+0xe>
 8000f4e:	2100      	movs	r1, #0
 8000f50:	42c8      	cmn	r0, r1
 8000f52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f54 <__aeabi_dcmpeq>:
 8000f54:	b510      	push	{r4, lr}
 8000f56:	f000 f849 	bl	8000fec <__eqdf2>
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <__aeabi_dcmplt>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f000 f8f1 	bl	8001148 <__ledf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	db01      	blt.n	8000f6e <__aeabi_dcmplt+0xe>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <__aeabi_dcmple>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	f000 f8e7 	bl	8001148 <__ledf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dd01      	ble.n	8000f82 <__aeabi_dcmple+0xe>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_dcmpgt>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f000 f86b 	bl	8001064 <__gedf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	dc01      	bgt.n	8000f96 <__aeabi_dcmpgt+0xe>
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <__aeabi_dcmpge>:
 8000f9c:	b510      	push	{r4, lr}
 8000f9e:	f000 f861 	bl	8001064 <__gedf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	da01      	bge.n	8000faa <__aeabi_dcmpge+0xe>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	2001      	movs	r0, #1
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)

08000fb0 <__clzsi2>:
 8000fb0:	211c      	movs	r1, #28
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d301      	bcc.n	8000fbe <__clzsi2+0xe>
 8000fba:	0c00      	lsrs	r0, r0, #16
 8000fbc:	3910      	subs	r1, #16
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d301      	bcc.n	8000fc8 <__clzsi2+0x18>
 8000fc4:	0a00      	lsrs	r0, r0, #8
 8000fc6:	3908      	subs	r1, #8
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d301      	bcc.n	8000fd2 <__clzsi2+0x22>
 8000fce:	0900      	lsrs	r0, r0, #4
 8000fd0:	3904      	subs	r1, #4
 8000fd2:	a202      	add	r2, pc, #8	; (adr r2, 8000fdc <__clzsi2+0x2c>)
 8000fd4:	5c10      	ldrb	r0, [r2, r0]
 8000fd6:	1840      	adds	r0, r0, r1
 8000fd8:	4770      	bx	lr
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	02020304 	.word	0x02020304
 8000fe0:	01010101 	.word	0x01010101
	...

08000fec <__eqdf2>:
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	464f      	mov	r7, r9
 8000ff0:	4646      	mov	r6, r8
 8000ff2:	46d6      	mov	lr, sl
 8000ff4:	4694      	mov	ip, r2
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	031a      	lsls	r2, r3, #12
 8000ffa:	0b12      	lsrs	r2, r2, #12
 8000ffc:	4d18      	ldr	r5, [pc, #96]	; (8001060 <__eqdf2+0x74>)
 8000ffe:	b5c0      	push	{r6, r7, lr}
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	030f      	lsls	r7, r1, #12
 8001004:	4692      	mov	sl, r2
 8001006:	005a      	lsls	r2, r3, #1
 8001008:	0006      	movs	r6, r0
 800100a:	4680      	mov	r8, r0
 800100c:	0b3f      	lsrs	r7, r7, #12
 800100e:	2001      	movs	r0, #1
 8001010:	0d64      	lsrs	r4, r4, #21
 8001012:	0fc9      	lsrs	r1, r1, #31
 8001014:	0d52      	lsrs	r2, r2, #21
 8001016:	0fdb      	lsrs	r3, r3, #31
 8001018:	42ac      	cmp	r4, r5
 800101a:	d00a      	beq.n	8001032 <__eqdf2+0x46>
 800101c:	42aa      	cmp	r2, r5
 800101e:	d003      	beq.n	8001028 <__eqdf2+0x3c>
 8001020:	4294      	cmp	r4, r2
 8001022:	d101      	bne.n	8001028 <__eqdf2+0x3c>
 8001024:	4557      	cmp	r7, sl
 8001026:	d00d      	beq.n	8001044 <__eqdf2+0x58>
 8001028:	bce0      	pop	{r5, r6, r7}
 800102a:	46ba      	mov	sl, r7
 800102c:	46b1      	mov	r9, r6
 800102e:	46a8      	mov	r8, r5
 8001030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001032:	003d      	movs	r5, r7
 8001034:	4335      	orrs	r5, r6
 8001036:	d1f7      	bne.n	8001028 <__eqdf2+0x3c>
 8001038:	42a2      	cmp	r2, r4
 800103a:	d1f5      	bne.n	8001028 <__eqdf2+0x3c>
 800103c:	4652      	mov	r2, sl
 800103e:	4665      	mov	r5, ip
 8001040:	432a      	orrs	r2, r5
 8001042:	d1f1      	bne.n	8001028 <__eqdf2+0x3c>
 8001044:	2001      	movs	r0, #1
 8001046:	45c8      	cmp	r8, r9
 8001048:	d1ee      	bne.n	8001028 <__eqdf2+0x3c>
 800104a:	4299      	cmp	r1, r3
 800104c:	d006      	beq.n	800105c <__eqdf2+0x70>
 800104e:	2c00      	cmp	r4, #0
 8001050:	d1ea      	bne.n	8001028 <__eqdf2+0x3c>
 8001052:	433e      	orrs	r6, r7
 8001054:	0030      	movs	r0, r6
 8001056:	1e46      	subs	r6, r0, #1
 8001058:	41b0      	sbcs	r0, r6
 800105a:	e7e5      	b.n	8001028 <__eqdf2+0x3c>
 800105c:	2000      	movs	r0, #0
 800105e:	e7e3      	b.n	8001028 <__eqdf2+0x3c>
 8001060:	000007ff 	.word	0x000007ff

08001064 <__gedf2>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	464e      	mov	r6, r9
 8001068:	4645      	mov	r5, r8
 800106a:	4657      	mov	r7, sl
 800106c:	46de      	mov	lr, fp
 800106e:	0004      	movs	r4, r0
 8001070:	0018      	movs	r0, r3
 8001072:	b5e0      	push	{r5, r6, r7, lr}
 8001074:	0016      	movs	r6, r2
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	0b1b      	lsrs	r3, r3, #12
 800107a:	4d32      	ldr	r5, [pc, #200]	; (8001144 <__gedf2+0xe0>)
 800107c:	030f      	lsls	r7, r1, #12
 800107e:	004a      	lsls	r2, r1, #1
 8001080:	4699      	mov	r9, r3
 8001082:	0043      	lsls	r3, r0, #1
 8001084:	46a4      	mov	ip, r4
 8001086:	46b0      	mov	r8, r6
 8001088:	0b3f      	lsrs	r7, r7, #12
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	0fc9      	lsrs	r1, r1, #31
 800108e:	0d5b      	lsrs	r3, r3, #21
 8001090:	0fc0      	lsrs	r0, r0, #31
 8001092:	42aa      	cmp	r2, r5
 8001094:	d029      	beq.n	80010ea <__gedf2+0x86>
 8001096:	42ab      	cmp	r3, r5
 8001098:	d018      	beq.n	80010cc <__gedf2+0x68>
 800109a:	2a00      	cmp	r2, #0
 800109c:	d12a      	bne.n	80010f4 <__gedf2+0x90>
 800109e:	433c      	orrs	r4, r7
 80010a0:	46a3      	mov	fp, r4
 80010a2:	4265      	negs	r5, r4
 80010a4:	4165      	adcs	r5, r4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <__gedf2+0x4c>
 80010aa:	464c      	mov	r4, r9
 80010ac:	4326      	orrs	r6, r4
 80010ae:	d027      	beq.n	8001100 <__gedf2+0x9c>
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	d115      	bne.n	80010e0 <__gedf2+0x7c>
 80010b4:	4281      	cmp	r1, r0
 80010b6:	d028      	beq.n	800110a <__gedf2+0xa6>
 80010b8:	2002      	movs	r0, #2
 80010ba:	3901      	subs	r1, #1
 80010bc:	4008      	ands	r0, r1
 80010be:	3801      	subs	r0, #1
 80010c0:	bcf0      	pop	{r4, r5, r6, r7}
 80010c2:	46bb      	mov	fp, r7
 80010c4:	46b2      	mov	sl, r6
 80010c6:	46a9      	mov	r9, r5
 80010c8:	46a0      	mov	r8, r4
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	464d      	mov	r5, r9
 80010ce:	432e      	orrs	r6, r5
 80010d0:	d12f      	bne.n	8001132 <__gedf2+0xce>
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d1ee      	bne.n	80010b4 <__gedf2+0x50>
 80010d6:	433c      	orrs	r4, r7
 80010d8:	4265      	negs	r5, r4
 80010da:	4165      	adcs	r5, r4
 80010dc:	2d00      	cmp	r5, #0
 80010de:	d0e9      	beq.n	80010b4 <__gedf2+0x50>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d1ed      	bne.n	80010c0 <__gedf2+0x5c>
 80010e4:	2001      	movs	r0, #1
 80010e6:	4240      	negs	r0, r0
 80010e8:	e7ea      	b.n	80010c0 <__gedf2+0x5c>
 80010ea:	003d      	movs	r5, r7
 80010ec:	4325      	orrs	r5, r4
 80010ee:	d120      	bne.n	8001132 <__gedf2+0xce>
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d0eb      	beq.n	80010cc <__gedf2+0x68>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1dd      	bne.n	80010b4 <__gedf2+0x50>
 80010f8:	464c      	mov	r4, r9
 80010fa:	4326      	orrs	r6, r4
 80010fc:	d1da      	bne.n	80010b4 <__gedf2+0x50>
 80010fe:	e7db      	b.n	80010b8 <__gedf2+0x54>
 8001100:	465b      	mov	r3, fp
 8001102:	2000      	movs	r0, #0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0db      	beq.n	80010c0 <__gedf2+0x5c>
 8001108:	e7d6      	b.n	80010b8 <__gedf2+0x54>
 800110a:	429a      	cmp	r2, r3
 800110c:	dc0a      	bgt.n	8001124 <__gedf2+0xc0>
 800110e:	dbe7      	blt.n	80010e0 <__gedf2+0x7c>
 8001110:	454f      	cmp	r7, r9
 8001112:	d8d1      	bhi.n	80010b8 <__gedf2+0x54>
 8001114:	d010      	beq.n	8001138 <__gedf2+0xd4>
 8001116:	2000      	movs	r0, #0
 8001118:	454f      	cmp	r7, r9
 800111a:	d2d1      	bcs.n	80010c0 <__gedf2+0x5c>
 800111c:	2900      	cmp	r1, #0
 800111e:	d0e1      	beq.n	80010e4 <__gedf2+0x80>
 8001120:	0008      	movs	r0, r1
 8001122:	e7cd      	b.n	80010c0 <__gedf2+0x5c>
 8001124:	4243      	negs	r3, r0
 8001126:	4158      	adcs	r0, r3
 8001128:	2302      	movs	r3, #2
 800112a:	4240      	negs	r0, r0
 800112c:	4018      	ands	r0, r3
 800112e:	3801      	subs	r0, #1
 8001130:	e7c6      	b.n	80010c0 <__gedf2+0x5c>
 8001132:	2002      	movs	r0, #2
 8001134:	4240      	negs	r0, r0
 8001136:	e7c3      	b.n	80010c0 <__gedf2+0x5c>
 8001138:	45c4      	cmp	ip, r8
 800113a:	d8bd      	bhi.n	80010b8 <__gedf2+0x54>
 800113c:	2000      	movs	r0, #0
 800113e:	45c4      	cmp	ip, r8
 8001140:	d2be      	bcs.n	80010c0 <__gedf2+0x5c>
 8001142:	e7eb      	b.n	800111c <__gedf2+0xb8>
 8001144:	000007ff 	.word	0x000007ff

08001148 <__ledf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464e      	mov	r6, r9
 800114c:	4645      	mov	r5, r8
 800114e:	4657      	mov	r7, sl
 8001150:	46de      	mov	lr, fp
 8001152:	0004      	movs	r4, r0
 8001154:	0018      	movs	r0, r3
 8001156:	b5e0      	push	{r5, r6, r7, lr}
 8001158:	0016      	movs	r6, r2
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	0b1b      	lsrs	r3, r3, #12
 800115e:	4d31      	ldr	r5, [pc, #196]	; (8001224 <__ledf2+0xdc>)
 8001160:	030f      	lsls	r7, r1, #12
 8001162:	004a      	lsls	r2, r1, #1
 8001164:	4699      	mov	r9, r3
 8001166:	0043      	lsls	r3, r0, #1
 8001168:	46a4      	mov	ip, r4
 800116a:	46b0      	mov	r8, r6
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	0d52      	lsrs	r2, r2, #21
 8001170:	0fc9      	lsrs	r1, r1, #31
 8001172:	0d5b      	lsrs	r3, r3, #21
 8001174:	0fc0      	lsrs	r0, r0, #31
 8001176:	42aa      	cmp	r2, r5
 8001178:	d011      	beq.n	800119e <__ledf2+0x56>
 800117a:	42ab      	cmp	r3, r5
 800117c:	d014      	beq.n	80011a8 <__ledf2+0x60>
 800117e:	2a00      	cmp	r2, #0
 8001180:	d12f      	bne.n	80011e2 <__ledf2+0x9a>
 8001182:	433c      	orrs	r4, r7
 8001184:	46a3      	mov	fp, r4
 8001186:	4265      	negs	r5, r4
 8001188:	4165      	adcs	r5, r4
 800118a:	2b00      	cmp	r3, #0
 800118c:	d114      	bne.n	80011b8 <__ledf2+0x70>
 800118e:	464c      	mov	r4, r9
 8001190:	4326      	orrs	r6, r4
 8001192:	d111      	bne.n	80011b8 <__ledf2+0x70>
 8001194:	465b      	mov	r3, fp
 8001196:	2000      	movs	r0, #0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d017      	beq.n	80011cc <__ledf2+0x84>
 800119c:	e010      	b.n	80011c0 <__ledf2+0x78>
 800119e:	003d      	movs	r5, r7
 80011a0:	4325      	orrs	r5, r4
 80011a2:	d112      	bne.n	80011ca <__ledf2+0x82>
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11c      	bne.n	80011e2 <__ledf2+0x9a>
 80011a8:	464d      	mov	r5, r9
 80011aa:	432e      	orrs	r6, r5
 80011ac:	d10d      	bne.n	80011ca <__ledf2+0x82>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d104      	bne.n	80011bc <__ledf2+0x74>
 80011b2:	433c      	orrs	r4, r7
 80011b4:	4265      	negs	r5, r4
 80011b6:	4165      	adcs	r5, r4
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	d10d      	bne.n	80011d8 <__ledf2+0x90>
 80011bc:	4281      	cmp	r1, r0
 80011be:	d016      	beq.n	80011ee <__ledf2+0xa6>
 80011c0:	2002      	movs	r0, #2
 80011c2:	3901      	subs	r1, #1
 80011c4:	4008      	ands	r0, r1
 80011c6:	3801      	subs	r0, #1
 80011c8:	e000      	b.n	80011cc <__ledf2+0x84>
 80011ca:	2002      	movs	r0, #2
 80011cc:	bcf0      	pop	{r4, r5, r6, r7}
 80011ce:	46bb      	mov	fp, r7
 80011d0:	46b2      	mov	sl, r6
 80011d2:	46a9      	mov	r9, r5
 80011d4:	46a0      	mov	r8, r4
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	2800      	cmp	r0, #0
 80011da:	d1f7      	bne.n	80011cc <__ledf2+0x84>
 80011dc:	2001      	movs	r0, #1
 80011de:	4240      	negs	r0, r0
 80011e0:	e7f4      	b.n	80011cc <__ledf2+0x84>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ea      	bne.n	80011bc <__ledf2+0x74>
 80011e6:	464c      	mov	r4, r9
 80011e8:	4326      	orrs	r6, r4
 80011ea:	d1e7      	bne.n	80011bc <__ledf2+0x74>
 80011ec:	e7e8      	b.n	80011c0 <__ledf2+0x78>
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd06      	ble.n	8001200 <__ledf2+0xb8>
 80011f2:	4243      	negs	r3, r0
 80011f4:	4158      	adcs	r0, r3
 80011f6:	2302      	movs	r3, #2
 80011f8:	4240      	negs	r0, r0
 80011fa:	4018      	ands	r0, r3
 80011fc:	3801      	subs	r0, #1
 80011fe:	e7e5      	b.n	80011cc <__ledf2+0x84>
 8001200:	429a      	cmp	r2, r3
 8001202:	dbe9      	blt.n	80011d8 <__ledf2+0x90>
 8001204:	454f      	cmp	r7, r9
 8001206:	d8db      	bhi.n	80011c0 <__ledf2+0x78>
 8001208:	d006      	beq.n	8001218 <__ledf2+0xd0>
 800120a:	2000      	movs	r0, #0
 800120c:	454f      	cmp	r7, r9
 800120e:	d2dd      	bcs.n	80011cc <__ledf2+0x84>
 8001210:	2900      	cmp	r1, #0
 8001212:	d0e3      	beq.n	80011dc <__ledf2+0x94>
 8001214:	0008      	movs	r0, r1
 8001216:	e7d9      	b.n	80011cc <__ledf2+0x84>
 8001218:	45c4      	cmp	ip, r8
 800121a:	d8d1      	bhi.n	80011c0 <__ledf2+0x78>
 800121c:	2000      	movs	r0, #0
 800121e:	45c4      	cmp	ip, r8
 8001220:	d2d4      	bcs.n	80011cc <__ledf2+0x84>
 8001222:	e7f5      	b.n	8001210 <__ledf2+0xc8>
 8001224:	000007ff 	.word	0x000007ff

08001228 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001232:	2100      	movs	r1, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f002 fa5b 	bl	80036f0 <HAL_TIM_PWM_Stop_DMA>
	LED_sending = 0;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000008c 	.word	0x2000008c
 800124c:	200001a0 	.word	0x200001a0

08001250 <LED_set>:

void LED_set(uint32_t LED_number, uint8_t red, uint8_t green, uint8_t blue) {
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	000c      	movs	r4, r1
 800125a:	0010      	movs	r0, r2
 800125c:	0019      	movs	r1, r3
 800125e:	1cfb      	adds	r3, r7, #3
 8001260:	1c22      	adds	r2, r4, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	1cbb      	adds	r3, r7, #2
 8001266:	1c02      	adds	r2, r0, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	1c7b      	adds	r3, r7, #1
 800126c:	1c0a      	adds	r2, r1, #0
 800126e:	701a      	strb	r2, [r3, #0]
	LED_Data[LED_number][0] = LED_number;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	b2d9      	uxtb	r1, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <LED_set+0x64>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	54d1      	strb	r1, [r2, r3]
	LED_Data[LED_number][1] = green;
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LED_set+0x64>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	18d3      	adds	r3, r2, r3
 8001284:	3301      	adds	r3, #1
 8001286:	1cba      	adds	r2, r7, #2
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	701a      	strb	r2, [r3, #0]
	LED_Data[LED_number][2] = red;
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <LED_set+0x64>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	18d3      	adds	r3, r2, r3
 8001294:	3302      	adds	r3, #2
 8001296:	1cfa      	adds	r2, r7, #3
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	701a      	strb	r2, [r3, #0]
	LED_Data[LED_number][3] = blue;
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <LED_set+0x64>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	18d3      	adds	r3, r2, r3
 80012a4:	3303      	adds	r3, #3
 80012a6:	1c7a      	adds	r2, r7, #1
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b003      	add	sp, #12
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	2000002c 	.word	0x2000002c

080012b8 <LED_send>:

void LED_send(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
	while (LED_sending)
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <LED_send+0x100>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1fb      	bne.n	80012c0 <LED_send+0x8>
		;

	LED_sending = 1;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <LED_send+0x100>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
	memset(LED_PWM_Data, 0, 24 * MAX_LED + 40);
 80012ce:	23d4      	movs	r3, #212	; 0xd4
 80012d0:	005a      	lsls	r2, r3, #1
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <LED_send+0x104>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f004 fa8d 	bl	80057f6 <memset>

	uint32_t idx = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < MAX_LED; ++i) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	e05a      	b.n	800139c <LED_send+0xe4>
		uint32_t color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8)
 80012e6:	4a36      	ldr	r2, [pc, #216]	; (80013c0 <LED_send+0x108>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	041a      	lsls	r2, r3, #16
 80012f4:	4932      	ldr	r1, [pc, #200]	; (80013c0 <LED_send+0x108>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18cb      	adds	r3, r1, r3
 80012fc:	3302      	adds	r3, #2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	4313      	orrs	r3, r2
				| (LED_Data[i][3]));
 8001304:	492e      	ldr	r1, [pc, #184]	; (80013c0 <LED_send+0x108>)
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	188a      	adds	r2, r1, r2
 800130c:	3203      	adds	r2, #3
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	4313      	orrs	r3, r2
		uint32_t color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8)
 8001312:	603b      	str	r3, [r7, #0]

		for (int j = 23; j >= 0; --j) {
 8001314:	2317      	movs	r3, #23
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e03a      	b.n	8001390 <LED_send+0xd8>
			if (color & (1 << j)) {
 800131a:	2201      	movs	r2, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	001a      	movs	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4013      	ands	r3, r2
 8001328:	d016      	beq.n	8001358 <LED_send+0xa0>
				LED_PWM_Data[idx] = 0.66 * TIM3->ARR;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <LED_send+0x10c>)
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fdda 	bl	8000ee8 <__aeabi_ui2d>
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <LED_send+0x110>)
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <LED_send+0x114>)
 8001338:	f7fe ffa2 	bl	8000280 <__aeabi_dmul>
 800133c:	0002      	movs	r2, r0
 800133e:	000b      	movs	r3, r1
 8001340:	0010      	movs	r0, r2
 8001342:	0019      	movs	r1, r3
 8001344:	f7fe ff7e 	bl	8000244 <__aeabi_d2uiz>
 8001348:	0003      	movs	r3, r0
 800134a:	b2d9      	uxtb	r1, r3
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <LED_send+0x104>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	1c0a      	adds	r2, r1, #0
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e015      	b.n	8001384 <LED_send+0xcc>
			} else {
				LED_PWM_Data[idx] = 0.33 * TIM3->ARR;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <LED_send+0x10c>)
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fdc3 	bl	8000ee8 <__aeabi_ui2d>
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <LED_send+0x110>)
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <LED_send+0x118>)
 8001366:	f7fe ff8b 	bl	8000280 <__aeabi_dmul>
 800136a:	0002      	movs	r2, r0
 800136c:	000b      	movs	r3, r1
 800136e:	0010      	movs	r0, r2
 8001370:	0019      	movs	r1, r3
 8001372:	f7fe ff67 	bl	8000244 <__aeabi_d2uiz>
 8001376:	0003      	movs	r3, r0
 8001378:	b2d9      	uxtb	r1, r3
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <LED_send+0x104>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	18d3      	adds	r3, r2, r3
 8001380:	1c0a      	adds	r2, r1, #0
 8001382:	701a      	strb	r2, [r3, #0]
			}
			idx++;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
		for (int j = 23; j >= 0; --j) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3b01      	subs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dac1      	bge.n	800131a <LED_send+0x62>
	for (int i = 0; i < MAX_LED; ++i) {
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	dda1      	ble.n	80012e6 <LED_send+0x2e>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) LED_PWM_Data,
 80013a2:	23d4      	movs	r3, #212	; 0xd4
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <LED_send+0x104>)
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <LED_send+0x11c>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	f001 fffc 	bl	80033a8 <HAL_TIM_PWM_Start_DMA>
			24 * MAX_LED + 40);
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b004      	add	sp, #16
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001a0 	.word	0x200001a0
 80013bc:	200001a4 	.word	0x200001a4
 80013c0:	2000002c 	.word	0x2000002c
 80013c4:	40000400 	.word	0x40000400
 80013c8:	51eb851f 	.word	0x51eb851f
 80013cc:	3fe51eb8 	.word	0x3fe51eb8
 80013d0:	3fd51eb8 	.word	0x3fd51eb8
 80013d4:	2000008c 	.word	0x2000008c

080013d8 <LED_menu>:

void LED_menu() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0da      	sub	sp, #360	; 0x168
 80013dc:	af00      	add	r7, sp, #0
	char msg[] = "=============LED MENU=============\r\n"
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <LED_menu+0x40>)
 80013e0:	22b4      	movs	r2, #180	; 0xb4
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	18ba      	adds	r2, r7, r2
 80013e6:	18d2      	adds	r2, r2, r3
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <LED_menu+0x44>)
 80013ea:	0010      	movs	r0, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	33ff      	adds	r3, #255	; 0xff
 80013f2:	001a      	movs	r2, r3
 80013f4:	f004 f9f6 	bl	80057e4 <memcpy>
			"OFF       - to turn off LED\r\n"
			"PARITY    - to turn on parity mode\r\n"
			"HEARTBEAT - to turn on heartbeat mode\r\n"
			"==================================\r\n\n";

	HAL_UART_Transmit(&huart1, msg, strlen(msg), -1);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7fe fe8e 	bl	800011c <strlen>
 8001400:	0003      	movs	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	425b      	negs	r3, r3
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <LED_menu+0x48>)
 800140c:	f003 f84e 	bl	80044ac <HAL_UART_Transmit>
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b05a      	add	sp, #360	; 0x168
 8001416:	bd80      	pop	{r7, pc}
 8001418:	fffffe9c 	.word	0xfffffe9c
 800141c:	08005820 	.word	0x08005820
 8001420:	200000d8 	.word	0x200000d8

08001424 <LED_whiteMode>:

uint8_t brightness;

void LED_whiteMode() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; ++i) {
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e009      	b.n	8001444 <LED_whiteMode+0x20>
		LED_set(i, 0, brightness, 0);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <LED_whiteMode+0x30>)
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	2100      	movs	r1, #0
 800143a:	f7ff ff09 	bl	8001250 <LED_set>
	for (int i = 0; i < MAX_LED; ++i) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3301      	adds	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	ddf2      	ble.n	8001430 <LED_whiteMode+0xc>
	}
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001a2 	.word	0x200001a2

08001458 <LED_shutdownMode>:

void LED_shutdownMode(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; ++i) {
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e008      	b.n	8001476 <LED_shutdownMode+0x1e>
		LED_set(i, 0, 0, 0);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	f7ff fef0 	bl	8001250 <LED_set>
	for (int i = 0; i < MAX_LED; ++i) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	ddf3      	ble.n	8001464 <LED_shutdownMode+0xc>
	}
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}

08001486 <LED_parityMode>:

void LED_parityMode(void) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LED; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	e013      	b.n	80014ba <LED_parityMode+0x34>
		if (i % 2) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	d006      	beq.n	80014a8 <LED_parityMode+0x22>
			LED_set(i, 255, 40, 0);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	21ff      	movs	r1, #255	; 0xff
 80014a2:	f7ff fed5 	bl	8001250 <LED_set>
 80014a6:	e005      	b.n	80014b4 <LED_parityMode+0x2e>
		} else {
			LED_set(i, 255, 255, 0);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	2300      	movs	r3, #0
 80014ac:	22ff      	movs	r2, #255	; 0xff
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	f7ff fece 	bl	8001250 <LED_set>
	for (int i = 0; i < MAX_LED; i++) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	dde8      	ble.n	8001492 <LED_parityMode+0xc>
		}
	}
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <LED_toggleMode>:

uint8_t toggle_var, toggle_pl;

void LED_toggleMode(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 fd38 	bl	8001f48 <HAL_Delay>

	for (int i = 0; i < MAX_LED; ++i) {
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e009      	b.n	80014f2 <LED_toggleMode+0x26>
		LED_set(i, toggle_var, 0, 0);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LED_toggleMode+0x38>)
 80014e2:	7819      	ldrb	r1, [r3, #0]
 80014e4:	2300      	movs	r3, #0
 80014e6:	2200      	movs	r2, #0
 80014e8:	f7ff feb2 	bl	8001250 <LED_set>
	for (int i = 0; i < MAX_LED; ++i) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3301      	adds	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	ddf2      	ble.n	80014de <LED_toggleMode+0x12>
	}
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	20000028 	.word	0x20000028

08001508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	46c6      	mov	lr, r8
 800150c:	b500      	push	{lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
 8001512:	61f8      	str	r0, [r7, #28]
	HAL_UART_Transmit(&huart1, &ch, 1, -1);
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	49a7      	ldr	r1, [pc, #668]	; (80017b8 <HAL_UART_RxCpltCallback+0x2b0>)
 800151a:	48a8      	ldr	r0, [pc, #672]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 800151c:	2201      	movs	r2, #1
 800151e:	f002 ffc5 	bl	80044ac <HAL_UART_Transmit>
	if (ch == '\r') {
 8001522:	4ba5      	ldr	r3, [pc, #660]	; (80017b8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0d      	cmp	r3, #13
 8001528:	d000      	beq.n	800152c <HAL_UART_RxCpltCallback+0x24>
 800152a:	e131      	b.n	8001790 <HAL_UART_RxCpltCallback+0x288>
 800152c:	466b      	mov	r3, sp
 800152e:	4698      	mov	r8, r3
		char n = '\n';
 8001530:	210b      	movs	r1, #11
 8001532:	2318      	movs	r3, #24
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	185b      	adds	r3, r3, r1
 8001538:	220a      	movs	r2, #10
 800153a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) &n, 1, -1);
 800153c:	2301      	movs	r3, #1
 800153e:	425b      	negs	r3, r3
 8001540:	2218      	movs	r2, #24
 8001542:	4694      	mov	ip, r2
 8001544:	44bc      	add	ip, r7
 8001546:	4461      	add	r1, ip
 8001548:	489c      	ldr	r0, [pc, #624]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 800154a:	2201      	movs	r2, #1
 800154c:	f002 ffae 	bl	80044ac <HAL_UART_Transmit>

		uint8_t slice[msg_idx + 1];
 8001550:	4b9b      	ldr	r3, [pc, #620]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	63ba      	str	r2, [r7, #56]	; 0x38
 800155a:	001a      	movs	r2, r3
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	2200      	movs	r2, #0
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	0002      	movs	r2, r0
 8001568:	0f52      	lsrs	r2, r2, #29
 800156a:	000e      	movs	r6, r1
 800156c:	00f6      	lsls	r6, r6, #3
 800156e:	617e      	str	r6, [r7, #20]
 8001570:	697e      	ldr	r6, [r7, #20]
 8001572:	4316      	orrs	r6, r2
 8001574:	617e      	str	r6, [r7, #20]
 8001576:	0002      	movs	r2, r0
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	613a      	str	r2, [r7, #16]
 800157c:	001a      	movs	r2, r3
 800157e:	603a      	str	r2, [r7, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	0002      	movs	r2, r0
 800158a:	0f52      	lsrs	r2, r2, #29
 800158c:	000e      	movs	r6, r1
 800158e:	00f5      	lsls	r5, r6, #3
 8001590:	4315      	orrs	r5, r2
 8001592:	0002      	movs	r2, r0
 8001594:	00d4      	lsls	r4, r2, #3
 8001596:	3307      	adds	r3, #7
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	466a      	mov	r2, sp
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	469d      	mov	sp, r3
 80015a2:	466b      	mov	r3, sp
 80015a4:	3300      	adds	r3, #0
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
		memcpy(slice, msg, msg_idx);
 80015a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	001a      	movs	r2, r3
 80015b0:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_UART_RxCpltCallback+0x2bc>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	f004 f916 	bl	80057e4 <memcpy>
		slice[msg_idx] = '\0';
 80015b8:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	001a      	movs	r2, r3
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	2100      	movs	r1, #0
 80015c2:	5499      	strb	r1, [r3, r2]

		if (msg_idx >= 2) {
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d800      	bhi.n	80015ce <HAL_UART_RxCpltCallback+0xc6>
 80015cc:	e0d5      	b.n	800177a <HAL_UART_RxCpltCallback+0x272>

			if (slice[0] == 'O' && slice[1] == 'N') {
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b4f      	cmp	r3, #79	; 0x4f
 80015d4:	d000      	beq.n	80015d8 <HAL_UART_RxCpltCallback+0xd0>
 80015d6:	e081      	b.n	80016dc <HAL_UART_RxCpltCallback+0x1d4>
 80015d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	2b4e      	cmp	r3, #78	; 0x4e
 80015de:	d000      	beq.n	80015e2 <HAL_UART_RxCpltCallback+0xda>
 80015e0:	e07c      	b.n	80016dc <HAL_UART_RxCpltCallback+0x1d4>
				if (msg_idx == 2) {
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d114      	bne.n	8001614 <HAL_UART_RxCpltCallback+0x10c>
					brightness = 255;
 80015ea:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <HAL_UART_RxCpltCallback+0x2c0>)
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	701a      	strb	r2, [r3, #0]
					const char *s = "MODE: ON\r\n";
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_UART_RxCpltCallback+0x2c4>)
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
					HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), -1);
 80015f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7fe fd90 	bl	800011c <strlen>
 80015fc:	0003      	movs	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	2301      	movs	r3, #1
 8001602:	425b      	negs	r3, r3
 8001604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001606:	486d      	ldr	r0, [pc, #436]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 8001608:	f002 ff50 	bl	80044ac <HAL_UART_Transmit>
					mode = 0;
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_UART_RxCpltCallback+0x2c8>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
				if (msg_idx == 2) {
 8001612:	e0b1      	b.n	8001778 <HAL_UART_RxCpltCallback+0x270>
				} else {
					if (slice[2] == ' ' && msg_idx > 3) {
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	2b20      	cmp	r3, #32
 800161a:	d000      	beq.n	800161e <HAL_UART_RxCpltCallback+0x116>
 800161c:	e0ac      	b.n	8001778 <HAL_UART_RxCpltCallback+0x270>
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d800      	bhi.n	8001628 <HAL_UART_RxCpltCallback+0x120>
 8001626:	e0a7      	b.n	8001778 <HAL_UART_RxCpltCallback+0x270>
						uint8_t is_num = 1;
 8001628:	232b      	movs	r3, #43	; 0x2b
 800162a:	2218      	movs	r2, #24
 800162c:	4694      	mov	ip, r2
 800162e:	44bc      	add	ip, r7
 8001630:	4463      	add	r3, ip
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]

						for (int i = 3; i < msg_idx; ++i) {
 8001636:	2303      	movs	r3, #3
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
 800163a:	e016      	b.n	800166a <HAL_UART_RxCpltCallback+0x162>
							if (!isdigit(slice[i])) {
 800163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	001a      	movs	r2, r3
 800164e:	2304      	movs	r3, #4
 8001650:	4013      	ands	r3, r2
 8001652:	d107      	bne.n	8001664 <HAL_UART_RxCpltCallback+0x15c>
								is_num = 0;
 8001654:	232b      	movs	r3, #43	; 0x2b
 8001656:	2218      	movs	r2, #24
 8001658:	4694      	mov	ip, r2
 800165a:	44bc      	add	ip, r7
 800165c:	4463      	add	r3, ip
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
								break;
 8001662:	e008      	b.n	8001676 <HAL_UART_RxCpltCallback+0x16e>
						for (int i = 3; i < msg_idx; ++i) {
 8001664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001666:	3301      	adds	r3, #1
 8001668:	647b      	str	r3, [r7, #68]	; 0x44
 800166a:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	001a      	movs	r2, r3
 8001670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001672:	4293      	cmp	r3, r2
 8001674:	dbe2      	blt.n	800163c <HAL_UART_RxCpltCallback+0x134>
							}
						}

						if (is_num) {
 8001676:	232b      	movs	r3, #43	; 0x2b
 8001678:	2218      	movs	r2, #24
 800167a:	4694      	mov	ip, r2
 800167c:	44bc      	add	ip, r7
 800167e:	4463      	add	r3, ip
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <HAL_UART_RxCpltCallback+0x180>
 8001686:	e077      	b.n	8001778 <HAL_UART_RxCpltCallback+0x270>
							uint32_t num = 0, rank = 1;
 8001688:	2300      	movs	r3, #0
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
 800168c:	2301      	movs	r3, #1
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
							for (int i = msg_idx - 1; i >= 3; --i) {
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001698:	e013      	b.n	80016c2 <HAL_UART_RxCpltCallback+0x1ba>
								num += (slice[i] - '0') * rank;
 800169a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800169c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3b30      	subs	r3, #48	; 0x30
 80016a4:	001a      	movs	r2, r3
 80016a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a8:	4353      	muls	r3, r2
 80016aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
								rank *= 10;
 80016b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b2:	0013      	movs	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	189b      	adds	r3, r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
							for (int i = msg_idx - 1; i >= 3; --i) {
 80016bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016be:	3b01      	subs	r3, #1
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	dce8      	bgt.n	800169a <HAL_UART_RxCpltCallback+0x192>
							}

							if (num > 255)
 80016c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ca:	2bff      	cmp	r3, #255	; 0xff
 80016cc:	d901      	bls.n	80016d2 <HAL_UART_RxCpltCallback+0x1ca>
								num = 255;
 80016ce:	23ff      	movs	r3, #255	; 0xff
 80016d0:	64bb      	str	r3, [r7, #72]	; 0x48

							brightness = num;
 80016d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <HAL_UART_RxCpltCallback+0x2c0>)
 80016d8:	701a      	strb	r2, [r3, #0]
				if (msg_idx == 2) {
 80016da:	e04d      	b.n	8001778 <HAL_UART_RxCpltCallback+0x270>
						}
					}
				}
			} else if (!strcmp((const char*) slice, (const char*) "OFF")) {
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <HAL_UART_RxCpltCallback+0x2d0>)
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe fd10 	bl	8000108 <strcmp>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d111      	bne.n	8001710 <HAL_UART_RxCpltCallback+0x208>
				const char *s = "MODE: OFF\r\n";
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_UART_RxCpltCallback+0x2d4>)
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
				HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), -1);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7fe fd12 	bl	800011c <strlen>
 80016f8:	0003      	movs	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2301      	movs	r3, #1
 80016fe:	425b      	negs	r3, r3
 8001700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001702:	482e      	ldr	r0, [pc, #184]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 8001704:	f002 fed2 	bl	80044ac <HAL_UART_Transmit>
				mode = 1;
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_UART_RxCpltCallback+0x2c8>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e034      	b.n	800177a <HAL_UART_RxCpltCallback+0x272>
			} else if (!strcmp((const char*) slice, (const char*) "PARITY")) {
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001714:	0011      	movs	r1, r2
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fcf6 	bl	8000108 <strcmp>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d111      	bne.n	8001744 <HAL_UART_RxCpltCallback+0x23c>
				const char *s = "MODE: PARITY\r\n";
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), -1);
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	0018      	movs	r0, r3
 8001728:	f7fe fcf8 	bl	800011c <strlen>
 800172c:	0003      	movs	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	2301      	movs	r3, #1
 8001732:	425b      	negs	r3, r3
 8001734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 8001738:	f002 feb8 	bl	80044ac <HAL_UART_Transmit>
				mode = 2;
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_UART_RxCpltCallback+0x2c8>)
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e01a      	b.n	800177a <HAL_UART_RxCpltCallback+0x272>
			} else if (!strcmp((const char*) slice,
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001748:	0011      	movs	r1, r2
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe fcdc 	bl	8000108 <strcmp>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d112      	bne.n	800177a <HAL_UART_RxCpltCallback+0x272>
					(const char*) "HEARTBEAT")) {
				const char *s = "MODE: HEARTBEAT\r\n";
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_UART_RxCpltCallback+0x2e4>)
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), -1);
 8001758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fcde 	bl	800011c <strlen>
 8001760:	0003      	movs	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	2301      	movs	r3, #1
 8001766:	425b      	negs	r3, r3
 8001768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <HAL_UART_RxCpltCallback+0x2b4>)
 800176c:	f002 fe9e 	bl	80044ac <HAL_UART_Transmit>
				mode = 3;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_UART_RxCpltCallback+0x2c8>)
 8001772:	2203      	movs	r2, #3
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e000      	b.n	800177a <HAL_UART_RxCpltCallback+0x272>
				if (msg_idx == 2) {
 8001778:	46c0      	nop			; (mov r8, r8)
			}
		}
		msg_idx = 0;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
		memset(msg, 0, 32);
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	0018      	movs	r0, r3
 8001788:	f004 f835 	bl	80057f6 <memset>
 800178c:	46c5      	mov	sp, r8
	} else {
		msg[msg_idx] = ch;
		msg_idx++;
	}
}
 800178e:	e00c      	b.n	80017aa <HAL_UART_RxCpltCallback+0x2a2>
		msg[msg_idx] = ch;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	001a      	movs	r2, r3
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_UART_RxCpltCallback+0x2bc>)
 800179c:	5499      	strb	r1, [r3, r2]
		msg_idx++;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_UART_RxCpltCallback+0x2b8>)
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b014      	add	sp, #80	; 0x50
 80017b0:	bc80      	pop	{r7}
 80017b2:	46b8      	mov	r8, r7
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	20000324 	.word	0x20000324
 80017bc:	200000d8 	.word	0x200000d8
 80017c0:	200001a1 	.word	0x200001a1
 80017c4:	2000006c 	.word	0x2000006c
 80017c8:	200001a2 	.word	0x200001a2
 80017cc:	08005984 	.word	0x08005984
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	08005a50 	.word	0x08005a50
 80017d8:	08005990 	.word	0x08005990
 80017dc:	08005994 	.word	0x08005994
 80017e0:	080059a0 	.word	0x080059a0
 80017e4:	080059a8 	.word	0x080059a8
 80017e8:	080059b8 	.word	0x080059b8
 80017ec:	080059c4 	.word	0x080059c4

080017f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017f4:	f000 fb44 	bl	8001e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017f8:	f000 f86a 	bl	80018d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017fc:	f000 f978 	bl	8001af0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001800:	f000 f958 	bl	8001ab4 <MX_DMA_Init>
	MX_TIM3_Init();
 8001804:	f000 f8c6 	bl	8001994 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001808:	f000 f924 	bl	8001a54 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	LED_sending = 0;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <main+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
	msg_idx = 0;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <main+0xc4>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	mode = 0;
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <main+0xc8>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	ch = ' ';
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <main+0xcc>)
 8001820:	2220      	movs	r2, #32
 8001822:	701a      	strb	r2, [r3, #0]
	toggle_var = 1, toggle_pl = 1;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <main+0xd0>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <main+0xd4>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
	brightness = 255;
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <main+0xd8>)
 8001832:	22ff      	movs	r2, #255	; 0xff
 8001834:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LED_menu();
 8001836:	f7ff fdcf 	bl	80013d8 <LED_menu>

	while (1) {
		HAL_UART_Receive_IT(&huart1, &ch, 1);
 800183a:	4920      	ldr	r1, [pc, #128]	; (80018bc <main+0xcc>)
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <main+0xdc>)
 800183e:	2201      	movs	r2, #1
 8001840:	0018      	movs	r0, r3
 8001842:	f002 fedc 	bl	80045fe <HAL_UART_Receive_IT>

		if (mode == 0) {
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <main+0xc8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <main+0x64>
			LED_whiteMode();
 800184e:	f7ff fde9 	bl	8001424 <LED_whiteMode>
 8001852:	e02a      	b.n	80018aa <main+0xba>
		} else if (mode == 1) {
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <main+0xc8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <main+0x72>
			LED_shutdownMode();
 800185c:	f7ff fdfc 	bl	8001458 <LED_shutdownMode>
 8001860:	e023      	b.n	80018aa <main+0xba>
		} else if (mode == 2) {
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <main+0xc8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d102      	bne.n	8001870 <main+0x80>
			LED_parityMode();
 800186a:	f7ff fe0c 	bl	8001486 <LED_parityMode>
 800186e:	e01c      	b.n	80018aa <main+0xba>
		} else if (mode == 3) {
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <main+0xc8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d118      	bne.n	80018aa <main+0xba>
			LED_toggleMode();
 8001878:	f7ff fe28 	bl	80014cc <LED_toggleMode>
			toggle_var += toggle_pl;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <main+0xd0>)
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <main+0xd4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <main+0xd0>)
 800188a:	701a      	strb	r2, [r3, #0]
			if (toggle_var == 255) {
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <main+0xd0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2bff      	cmp	r3, #255	; 0xff
 8001892:	d103      	bne.n	800189c <main+0xac>
				toggle_pl = -1;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <main+0xd4>)
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e006      	b.n	80018aa <main+0xba>
			} else if (toggle_var == 0) {
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <main+0xd0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <main+0xba>
				toggle_pl = 1;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <main+0xd4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			}
		}
		LED_send();
 80018aa:	f7ff fd05 	bl	80012b8 <LED_send>
		HAL_UART_Receive_IT(&huart1, &ch, 1);
 80018ae:	e7c4      	b.n	800183a <main+0x4a>
 80018b0:	200001a0 	.word	0x200001a0
 80018b4:	200001a1 	.word	0x200001a1
 80018b8:	200000d4 	.word	0x200000d4
 80018bc:	20000324 	.word	0x20000324
 80018c0:	20000028 	.word	0x20000028
 80018c4:	200000d5 	.word	0x200000d5
 80018c8:	200001a2 	.word	0x200001a2
 80018cc:	200000d8 	.word	0x200000d8

080018d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b095      	sub	sp, #84	; 0x54
 80018d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018d6:	2420      	movs	r4, #32
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	0018      	movs	r0, r3
 80018dc:	2330      	movs	r3, #48	; 0x30
 80018de:	001a      	movs	r2, r3
 80018e0:	2100      	movs	r1, #0
 80018e2:	f003 ff88 	bl	80057f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018e6:	2310      	movs	r3, #16
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	0018      	movs	r0, r3
 80018ec:	2310      	movs	r3, #16
 80018ee:	001a      	movs	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	f003 ff80 	bl	80057f6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018f6:	003b      	movs	r3, r7
 80018f8:	0018      	movs	r0, r3
 80018fa:	2310      	movs	r3, #16
 80018fc:	001a      	movs	r2, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	f003 ff79 	bl	80057f6 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001904:	0021      	movs	r1, r4
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2202      	movs	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2201      	movs	r2, #1
 8001910:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2210      	movs	r2, #16
 8001916:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2202      	movs	r2, #2
 800191c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	22a0      	movs	r2, #160	; 0xa0
 8001928:	0392      	lsls	r2, r2, #14
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001932:	187b      	adds	r3, r7, r1
 8001934:	0018      	movs	r0, r3
 8001936:	f000 ffad 	bl	8002894 <HAL_RCC_OscConfig>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0x72>
		Error_Handler();
 800193e:	f000 f91f 	bl	8001b80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001942:	2110      	movs	r1, #16
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2207      	movs	r2, #7
 8001948:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2202      	movs	r2, #2
 800194e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2101      	movs	r1, #1
 8001960:	0018      	movs	r0, r3
 8001962:	f001 fab1 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x9e>
		Error_Handler();
 800196a:	f000 f909 	bl	8001b80 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800196e:	003b      	movs	r3, r7
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001974:	003b      	movs	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800197a:	003b      	movs	r3, r7
 800197c:	0018      	movs	r0, r3
 800197e:	f001 fbf5 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xba>
		Error_Handler();
 8001986:	f000 f8fb 	bl	8001b80 <Error_Handler>
	}
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b015      	add	sp, #84	; 0x54
 8001990:	bd90      	pop	{r4, r7, pc}
	...

08001994 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800199a:	2320      	movs	r3, #32
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	0018      	movs	r0, r3
 80019a0:	2308      	movs	r3, #8
 80019a2:	001a      	movs	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f003 ff26 	bl	80057f6 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	0018      	movs	r0, r3
 80019ae:	231c      	movs	r3, #28
 80019b0:	001a      	movs	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	f003 ff1f 	bl	80057f6 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <MX_TIM3_Init+0xbc>)
 80019bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 29;
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019cc:	221d      	movs	r2, #29
 80019ce:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f001 fc92 	bl	8003308 <HAL_TIM_PWM_Init>
 80019e4:	1e03      	subs	r3, r0, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM3_Init+0x58>
		Error_Handler();
 80019e8:	f000 f8ca 	bl	8001b80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2120      	movs	r1, #32
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80019fa:	187a      	adds	r2, r7, r1
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_TIM3_Init+0xb8>)
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f002 fc9d 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8001a0a:	f000 f8b9 	bl	8001b80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2260      	movs	r2, #96	; 0x60
 8001a12:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001a26:	1d39      	adds	r1, r7, #4
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_TIM3_Init+0xb8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f002 f84d 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8001a36:	f000 f8a3 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <MX_TIM3_Init+0xb8>)
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f91f 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b00a      	add	sp, #40	; 0x28
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	2000008c 	.word	0x2000008c
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <MX_USART1_UART_Init+0x5c>)
 8001a5c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a60:	22e1      	movs	r2, #225	; 0xe1
 8001a62:	0252      	lsls	r2, r2, #9
 8001a64:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <MX_USART1_UART_Init+0x58>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f002 fcb3 	bl	8004404 <HAL_UART_Init>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001aa2:	f000 f86d 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000d8 	.word	0x200000d8
 8001ab0:	40013800 	.word	0x40013800

08001ab4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_DMA_Init+0x38>)
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_DMA_Init+0x38>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_DMA_Init+0x38>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	200b      	movs	r0, #11
 8001ad8:	f000 fb06 	bl	80020e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001adc:	200b      	movs	r0, #11
 8001ade:	f000 fb18 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000

08001af0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001af6:	240c      	movs	r4, #12
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	0018      	movs	r0, r3
 8001afc:	2314      	movs	r3, #20
 8001afe:	001a      	movs	r2, r3
 8001b00:	2100      	movs	r1, #0
 8001b02:	f003 fe78 	bl	80057f6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0289      	lsls	r1, r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	02c9      	lsls	r1, r1, #11
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_GPIO_Init+0x88>)
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	02db      	lsls	r3, r3, #11
 8001b38:	4013      	ands	r3, r2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	2108      	movs	r1, #8
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fe87 	bl	8002858 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001b4a:	0021      	movs	r1, r4
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2208      	movs	r2, #8
 8001b50:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2201      	movs	r2, #1
 8001b56:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <MX_GPIO_Init+0x8c>)
 8001b68:	0019      	movs	r1, r3
 8001b6a:	0010      	movs	r0, r2
 8001b6c:	f000 fd04 	bl	8002578 <HAL_GPIO_Init>

}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b009      	add	sp, #36	; 0x24
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400

08001b80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	69da      	ldr	r2, [r3, #28]
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0549      	lsls	r1, r1, #21
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	055b      	lsls	r3, r3, #21
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_TIM_PWM_MspInit+0x9c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d140      	bne.n	8001c68 <HAL_TIM_PWM_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_TIM_PWM_MspInit+0xa0>)
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_TIM_PWM_MspInit+0xa0>)
 8001bec:	2102      	movs	r1, #2
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_TIM_PWM_MspInit+0xa0>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_TIM_PWM_MspInit+0xa8>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c06:	2210      	movs	r2, #16
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0052      	lsls	r2, r2, #1
 8001c1c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fa8a 	bl	800214c <HAL_DMA_Init>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8001c3c:	f7ff ffa0 	bl	8001b80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f000 fa43 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c62:	2010      	movs	r0, #16
 8001c64:	f000 fa55 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b004      	add	sp, #16
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	2000015c 	.word	0x2000015c
 8001c7c:	40020044 	.word	0x40020044

08001c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	240c      	movs	r4, #12
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	2314      	movs	r3, #20
 8001c90:	001a      	movs	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f003 fdaf 	bl	80057f6 <memset>
  if(htim->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_TIM_MspPostInit+0x74>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d124      	bne.n	8001cec <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_TIM_MspPostInit+0x78>)
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_TIM_MspPostInit+0x78>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0289      	lsls	r1, r1, #10
 8001cac:	430a      	orrs	r2, r1
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_TIM_MspPostInit+0x78>)
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2202      	movs	r2, #2
 8001cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2202      	movs	r2, #2
 8001cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2201      	movs	r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	187a      	adds	r2, r7, r1
 8001ce0:	2390      	movs	r3, #144	; 0x90
 8001ce2:	05db      	lsls	r3, r3, #23
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 fc46 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b009      	add	sp, #36	; 0x24
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b08b      	sub	sp, #44	; 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	2414      	movs	r4, #20
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	2314      	movs	r3, #20
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f003 fd71 	bl	80057f6 <memset>
  if(huart->Instance==USART1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <HAL_UART_MspInit+0xa4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d13b      	bne.n	8001d96 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	01c9      	lsls	r1, r1, #7
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	619a      	str	r2, [r3, #24]
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0289      	lsls	r1, r1, #10
 8001d44:	430a      	orrs	r2, r1
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_UART_MspInit+0xa8>)
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d56:	193b      	adds	r3, r7, r4
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	00d2      	lsls	r2, r2, #3
 8001d5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	0021      	movs	r1, r4
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2202      	movs	r2, #2
 8001d64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2201      	movs	r2, #1
 8001d76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	187a      	adds	r2, r7, r1
 8001d7a:	2390      	movs	r3, #144	; 0x90
 8001d7c:	05db      	lsls	r3, r3, #23
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 fbf9 	bl	8002578 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	201b      	movs	r0, #27
 8001d8c:	f000 f9ac 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d90:	201b      	movs	r0, #27
 8001d92:	f000 f9be 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b00b      	add	sp, #44	; 0x2c
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40021000 	.word	0x40021000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 f8a0 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <DMA1_Channel4_5_IRQHandler+0x14>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 fadf 	bl	80023a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	2000015c 	.word	0x2000015c

08001df0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <TIM3_IRQHandler+0x14>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f001 fd52 	bl	80038a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	2000008c 	.word	0x2000008c

08001e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <USART1_IRQHandler+0x14>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f002 fc56 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	200000d8 	.word	0x200000d8

08001e20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490e      	ldr	r1, [pc, #56]	; (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0b      	ldr	r4, [pc, #44]	; (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e56:	f7ff ffe3 	bl	8001e20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e5a:	f003 fc9f 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5e:	f7ff fcc7 	bl	80017f0 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   r0, =_estack
 8001e64:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e70:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8001e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e78:	2000032c 	.word	0x2000032c

08001e7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_IRQHandler>
	...

08001e80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_Init+0x24>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_Init+0x24>)
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f809 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e96:	f7ff fe79 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_InitTick+0x5c>)
 8001eb2:	681c      	ldr	r4, [r3, #0]
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_InitTick+0x60>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	0019      	movs	r1, r3
 8001eba:	23fa      	movs	r3, #250	; 0xfa
 8001ebc:	0098      	lsls	r0, r3, #2
 8001ebe:	f7fe f935 	bl	800012c <__udivsi3>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	f7fe f930 	bl	800012c <__udivsi3>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f92f 	bl	8002132 <HAL_SYSTICK_Config>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e00f      	b.n	8001efc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d80b      	bhi.n	8001efa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f8fc 	bl	80020e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_InitTick+0x64>)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b003      	add	sp, #12
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x1c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	001a      	movs	r2, r3
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_IncTick+0x20>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	18d2      	adds	r2, r2, r3
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_IncTick+0x20>)
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000328 	.word	0x20000328

08001f34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_GetTick+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000328 	.word	0x20000328

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	001a      	movs	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	f7ff ffe0 	bl	8001f34 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	20000008 	.word	0x20000008

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa2:	d809      	bhi.n	8001fb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	001a      	movs	r2, r3
 8001faa:	231f      	movs	r3, #31
 8001fac:	401a      	ands	r2, r3
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_EnableIRQ+0x30>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4091      	lsls	r1, r2
 8001fb4:	000a      	movs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0002      	movs	r2, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd8:	d828      	bhi.n	800202c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <__NVIC_SetPriority+0xd4>)
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	33c0      	adds	r3, #192	; 0xc0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	589b      	ldr	r3, [r3, r2]
 8001fea:	1dfa      	adds	r2, r7, #7
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	0011      	movs	r1, r2
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	00d2      	lsls	r2, r2, #3
 8001ff6:	21ff      	movs	r1, #255	; 0xff
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	43d2      	mvns	r2, r2
 8001ffe:	401a      	ands	r2, r3
 8002000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	401a      	ands	r2, r3
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	0018      	movs	r0, r3
 8002010:	2303      	movs	r3, #3
 8002012:	4003      	ands	r3, r0
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002018:	481f      	ldr	r0, [pc, #124]	; (8002098 <__NVIC_SetPriority+0xd4>)
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	430a      	orrs	r2, r1
 8002024:	33c0      	adds	r3, #192	; 0xc0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202a:	e031      	b.n	8002090 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <__NVIC_SetPriority+0xd8>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0019      	movs	r1, r3
 8002034:	230f      	movs	r3, #15
 8002036:	400b      	ands	r3, r1
 8002038:	3b08      	subs	r3, #8
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3306      	adds	r3, #6
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1dfa      	adds	r2, r7, #7
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	0011      	movs	r1, r2
 800204c:	2203      	movs	r2, #3
 800204e:	400a      	ands	r2, r1
 8002050:	00d2      	lsls	r2, r2, #3
 8002052:	21ff      	movs	r1, #255	; 0xff
 8002054:	4091      	lsls	r1, r2
 8002056:	000a      	movs	r2, r1
 8002058:	43d2      	mvns	r2, r2
 800205a:	401a      	ands	r2, r3
 800205c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	22ff      	movs	r2, #255	; 0xff
 8002064:	401a      	ands	r2, r3
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	0018      	movs	r0, r3
 800206c:	2303      	movs	r3, #3
 800206e:	4003      	ands	r3, r0
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <__NVIC_SetPriority+0xd8>)
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	001c      	movs	r4, r3
 800207c:	230f      	movs	r3, #15
 800207e:	4023      	ands	r3, r4
 8002080:	3b08      	subs	r3, #8
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	430a      	orrs	r2, r1
 8002086:	3306      	adds	r3, #6
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18c3      	adds	r3, r0, r3
 800208c:	3304      	adds	r3, #4
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b003      	add	sp, #12
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	045b      	lsls	r3, r3, #17
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d301      	bcc.n	80020b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b4:	2301      	movs	r3, #1
 80020b6:	e010      	b.n	80020da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <SysTick_Config+0x44>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	3a01      	subs	r2, #1
 80020be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c0:	2301      	movs	r3, #1
 80020c2:	425b      	negs	r3, r3
 80020c4:	2103      	movs	r1, #3
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff ff7c 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <SysTick_Config+0x44>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SysTick_Config+0x44>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	210f      	movs	r1, #15
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	0011      	movs	r1, r2
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	0002      	movs	r2, r0
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b25b      	sxtb	r3, r3
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff ff33 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff ffaf 	bl	80020a0 <SysTick_Config>
 8002142:	0003      	movs	r3, r0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e036      	b.n	80021d0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2221      	movs	r2, #33	; 0x21
 8002166:	2102      	movs	r1, #2
 8002168:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_DMA_Init+0x8c>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f9c4 	bl	8002540 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}  
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	ffffc00f 	.word	0xffffc00f

080021dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_DMA_Start_IT+0x24>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e04f      	b.n	80022a0 <HAL_DMA_Start_IT+0xc4>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	2101      	movs	r1, #1
 8002206:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2221      	movs	r2, #33	; 0x21
 800220c:	5c9b      	ldrb	r3, [r3, r2]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d13a      	bne.n	800228a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2221      	movs	r2, #33	; 0x21
 8002218:	2102      	movs	r1, #2
 800221a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f954 	bl	80024e6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	210e      	movs	r1, #14
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e00f      	b.n	8002278 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	210a      	movs	r1, #10
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2104      	movs	r1, #4
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e007      	b.n	800229a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002292:	2317      	movs	r3, #23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800229a:	2317      	movs	r3, #23
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
} 
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b006      	add	sp, #24
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2221      	movs	r2, #33	; 0x21
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2204      	movs	r2, #4
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e020      	b.n	8002310 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	210e      	movs	r1, #14
 80022da:	438a      	bics	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	438a      	bics	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	2101      	movs	r1, #1
 80022f8:	4091      	lsls	r1, r2
 80022fa:	000a      	movs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2221      	movs	r2, #33	; 0x21
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	210f      	movs	r1, #15
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d006      	beq.n	8002342 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2204      	movs	r2, #4
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e028      	b.n	8002394 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	210e      	movs	r1, #14
 800234e:	438a      	bics	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	438a      	bics	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2101      	movs	r1, #1
 800236c:	4091      	lsls	r1, r2
 800236e:	000a      	movs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2221      	movs	r2, #33	; 0x21
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	0010      	movs	r0, r2
 8002392:	4798      	blx	r3
    } 
  }
  return status;
 8002394:	230f      	movs	r3, #15
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2204      	movs	r2, #4
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	d024      	beq.n	8002414 <HAL_DMA_IRQHandler+0x72>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2204      	movs	r2, #4
 80023ce:	4013      	ands	r3, r2
 80023d0:	d020      	beq.n	8002414 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	4013      	ands	r3, r2
 80023dc:	d107      	bne.n	80023ee <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2104      	movs	r1, #4
 80023ea:	438a      	bics	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2104      	movs	r1, #4
 80023f8:	4091      	lsls	r1, r2
 80023fa:	000a      	movs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d100      	bne.n	8002408 <HAL_DMA_IRQHandler+0x66>
 8002406:	e06a      	b.n	80024de <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	0010      	movs	r0, r2
 8002410:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002412:	e064      	b.n	80024de <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2202      	movs	r2, #2
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	d02b      	beq.n	800247c <HAL_DMA_IRQHandler+0xda>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d027      	beq.n	800247c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	4013      	ands	r3, r2
 8002436:	d10b      	bne.n	8002450 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	210a      	movs	r1, #10
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2221      	movs	r2, #33	; 0x21
 800244c:	2101      	movs	r1, #1
 800244e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	2102      	movs	r1, #2
 800245a:	4091      	lsls	r1, r2
 800245c:	000a      	movs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d036      	beq.n	80024de <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	0010      	movs	r0, r2
 8002478:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800247a:	e030      	b.n	80024de <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2208      	movs	r2, #8
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	d028      	beq.n	80024de <HAL_DMA_IRQHandler+0x13c>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2208      	movs	r2, #8
 8002490:	4013      	ands	r3, r2
 8002492:	d024      	beq.n	80024de <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	210e      	movs	r1, #14
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	2101      	movs	r1, #1
 80024ae:	4091      	lsls	r1, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2221      	movs	r2, #33	; 0x21
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	0010      	movs	r0, r2
 80024da:	4798      	blx	r3
    }
   }
}  
 80024dc:	e7ff      	b.n	80024de <HAL_DMA_IRQHandler+0x13c>
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2101      	movs	r1, #1
 80024fe:	4091      	lsls	r1, r2
 8002500:	000a      	movs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b10      	cmp	r3, #16
 8002512:	d108      	bne.n	8002526 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002524:	e007      	b.n	8002536 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	60da      	str	r2, [r3, #12]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a08      	ldr	r2, [pc, #32]	; (8002570 <DMA_CalcBaseAndBitshift+0x30>)
 800254e:	4694      	mov	ip, r2
 8002550:	4463      	add	r3, ip
 8002552:	2114      	movs	r1, #20
 8002554:	0018      	movs	r0, r3
 8002556:	f7fd fde9 	bl	800012c <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	009a      	lsls	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a03      	ldr	r2, [pc, #12]	; (8002574 <DMA_CalcBaseAndBitshift+0x34>)
 8002566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	bffdfff8 	.word	0xbffdfff8
 8002574:	40020000 	.word	0x40020000

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	e14f      	b.n	8002828 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4091      	lsls	r1, r2
 8002592:	000a      	movs	r2, r1
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d100      	bne.n	80025a0 <HAL_GPIO_Init+0x28>
 800259e:	e140      	b.n	8002822 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d130      	bne.n	800261a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	409a      	lsls	r2, r3
 80025c6:	0013      	movs	r3, r2
 80025c8:	43da      	mvns	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	0013      	movs	r3, r2
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ee:	2201      	movs	r2, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	2201      	movs	r2, #1
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2203      	movs	r2, #3
 8002620:	4013      	ands	r3, r2
 8002622:	2b03      	cmp	r3, #3
 8002624:	d017      	beq.n	8002656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	43da      	mvns	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2203      	movs	r2, #3
 800265c:	4013      	ands	r3, r2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d123      	bne.n	80026aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	58d3      	ldr	r3, [r2, r3]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	409a      	lsls	r2, r3
 800267c:	0013      	movs	r3, r2
 800267e:	43da      	mvns	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2107      	movs	r1, #7
 800268e:	400b      	ands	r3, r1
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	409a      	lsls	r2, r3
 8002694:	0013      	movs	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	409a      	lsls	r2, r3
 80026b8:	0013      	movs	r3, r2
 80026ba:	43da      	mvns	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2203      	movs	r2, #3
 80026c8:	401a      	ands	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	23c0      	movs	r3, #192	; 0xc0
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	4013      	ands	r3, r2
 80026e8:	d100      	bne.n	80026ec <HAL_GPIO_Init+0x174>
 80026ea:	e09a      	b.n	8002822 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_GPIO_Init+0x2c8>)
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_GPIO_Init+0x2c8>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_GPIO_Init+0x2c8>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	589b      	ldr	r3, [r3, r2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	2390      	movs	r3, #144	; 0x90
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	429a      	cmp	r2, r3
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x1e2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a44      	ldr	r2, [pc, #272]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x1de>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a43      	ldr	r2, [pc, #268]	; (800284c <HAL_GPIO_Init+0x2d4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x1da>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_GPIO_Init+0x2d8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x1d6>
 800274a:	2303      	movs	r3, #3
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x1e4>
 800274e:	2305      	movs	r3, #5
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x1e4>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x1e4>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x1e4>
 800275a:	2300      	movs	r3, #0
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	2103      	movs	r1, #3
 8002760:	400a      	ands	r2, r1
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43da      	mvns	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	4013      	ands	r3, r2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	4013      	ands	r3, r2
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43da      	mvns	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	035b      	lsls	r3, r3, #13
 80027e6:	4013      	ands	r3, r2
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43da      	mvns	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	039b      	lsls	r3, r3, #14
 8002810:	4013      	ands	r3, r2
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	40da      	lsrs	r2, r3
 8002830:	1e13      	subs	r3, r2, #0
 8002832:	d000      	beq.n	8002836 <HAL_GPIO_Init+0x2be>
 8002834:	e6a8      	b.n	8002588 <HAL_GPIO_Init+0x10>
  } 
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	48000400 	.word	0x48000400
 800284c:	48000800 	.word	0x48000800
 8002850:	48000c00 	.word	0x48000c00
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	0008      	movs	r0, r1
 8002862:	0011      	movs	r1, r2
 8002864:	1cbb      	adds	r3, r7, #2
 8002866:	1c02      	adds	r2, r0, #0
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	1c7b      	adds	r3, r7, #1
 800286c:	1c0a      	adds	r2, r1, #0
 800286e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002870:	1c7b      	adds	r3, r7, #1
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002878:	1cbb      	adds	r3, r7, #2
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e301      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d100      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1e>
 80028b0:	e08d      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028b2:	4bc3      	ldr	r3, [pc, #780]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	220c      	movs	r2, #12
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00e      	beq.n	80028dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028be:	4bc0      	ldr	r3, [pc, #768]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	220c      	movs	r2, #12
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
 80028ca:	4bbd      	ldr	r3, [pc, #756]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	401a      	ands	r2, r3
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	025b      	lsls	r3, r3, #9
 80028d8:	429a      	cmp	r2, r3
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4bb8      	ldr	r3, [pc, #736]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4013      	ands	r3, r2
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x56>
 80028e8:	e070      	b.n	80029cc <HAL_RCC_OscConfig+0x138>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d000      	beq.n	80028f4 <HAL_RCC_OscConfig+0x60>
 80028f2:	e06b      	b.n	80029cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2d8      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x7c>
 8002900:	4baf      	ldr	r3, [pc, #700]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4bae      	ldr	r3, [pc, #696]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0249      	lsls	r1, r1, #9
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e02f      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x9e>
 8002918:	4ba9      	ldr	r3, [pc, #676]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4ba8      	ldr	r3, [pc, #672]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800291e:	49a9      	ldr	r1, [pc, #676]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4ba6      	ldr	r3, [pc, #664]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800292a:	49a7      	ldr	r1, [pc, #668]	; (8002bc8 <HAL_RCC_OscConfig+0x334>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e01e      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0xc4>
 800293a:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4ba0      	ldr	r3, [pc, #640]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	02c9      	lsls	r1, r1, #11
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b9d      	ldr	r3, [pc, #628]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b9c      	ldr	r3, [pc, #624]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0249      	lsls	r1, r1, #9
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xdc>
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800295e:	4999      	ldr	r1, [pc, #612]	; (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002960:	400a      	ands	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b96      	ldr	r3, [pc, #600]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b95      	ldr	r3, [pc, #596]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 800296a:	4997      	ldr	r1, [pc, #604]	; (8002bc8 <HAL_RCC_OscConfig+0x334>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d014      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fadc 	bl	8001f34 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002982:	f7ff fad7 	bl	8001f34 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e28a      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002994:	4b8a      	ldr	r3, [pc, #552]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4013      	ands	r3, r2
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0xee>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff fac7 	bl	8001f34 <HAL_GetTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff fac2 	bl	8001f34 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e275      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x118>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x146>
 80029d8:	e069      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029da:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	220c      	movs	r2, #12
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	220c      	movs	r2, #12
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d11c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x196>
 80029f0:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	4013      	ands	r3, r2
 80029fa:	d116      	bne.n	8002a2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e24b      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	22f8      	movs	r2, #248	; 0xf8
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00da      	lsls	r2, r3, #3
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a28:	e041      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fa79 	bl	8001f34 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7ff fa74 	bl	8001f34 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e227      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f1      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22f8      	movs	r2, #248	; 0xf8
 8002a6a:	4393      	bics	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00da      	lsls	r2, r3, #3
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e018      	b.n	8002aae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	438a      	bics	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fa54 	bl	8001f34 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7ff fa4f 	bl	8001f34 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e202      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d036      	beq.n	8002b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d019      	beq.n	8002af4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff fa32 	bl	8001f34 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7ff fa2d 	bl	8001f34 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1e0      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d0f1      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x242>
 8002af2:	e018      	b.n	8002b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7ff fa18 	bl	8001f34 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fa13 	bl	8001f34 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1c6      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d1f1      	bne.n	8002b0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <HAL_RCC_OscConfig+0x29e>
 8002b30:	e0b4      	b.n	8002c9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	201f      	movs	r0, #31
 8002b34:	183b      	adds	r3, r7, r0
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	4013      	ands	r3, r2
 8002b44:	d110      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0549      	lsls	r1, r1, #21
 8002b50:	430a      	orrs	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	055b      	lsls	r3, r3, #21
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	d11a      	bne.n	8002baa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0049      	lsls	r1, r1, #1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7ff f9d7 	bl	8001f34 <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7ff f9d2 	bl	8001f34 <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e185      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x338>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x33c>
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_RCC_OscConfig+0x32c>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	621a      	str	r2, [r3, #32]
 8002bbe:	e035      	b.n	8002c2c <HAL_RCC_OscConfig+0x398>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	fffeffff 	.word	0xfffeffff
 8002bc8:	fffbffff 	.word	0xfffbffff
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
 8002bd8:	4bb6      	ldr	r3, [pc, #728]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	4bb5      	ldr	r3, [pc, #724]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	621a      	str	r2, [r3, #32]
 8002be4:	4bb3      	ldr	r3, [pc, #716]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	4bb2      	ldr	r3, [pc, #712]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002bea:	2104      	movs	r1, #4
 8002bec:	438a      	bics	r2, r1
 8002bee:	621a      	str	r2, [r3, #32]
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x398>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x380>
 8002bfa:	4bae      	ldr	r3, [pc, #696]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	4bad      	ldr	r3, [pc, #692]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c00:	2104      	movs	r1, #4
 8002c02:	430a      	orrs	r2, r1
 8002c04:	621a      	str	r2, [r3, #32]
 8002c06:	4bab      	ldr	r3, [pc, #684]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	4baa      	ldr	r3, [pc, #680]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	621a      	str	r2, [r3, #32]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x398>
 8002c14:	4ba7      	ldr	r3, [pc, #668]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	621a      	str	r2, [r3, #32]
 8002c20:	4ba4      	ldr	r3, [pc, #656]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7ff f97e 	bl	8001f34 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7ff f979 	bl	8001f34 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4a9b      	ldr	r2, [pc, #620]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e12b      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
 8002c5c:	e013      	b.n	8002c86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7ff f969 	bl	8001f34 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e009      	b.n	8002c7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff f964 	bl	8001f34 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	4a91      	ldr	r2, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x624>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e116      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002c96:	4989      	ldr	r1, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cae:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb2:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cba:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbe:	4b7d      	ldr	r3, [pc, #500]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f935 	bl	8001f34 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cd0:	f7ff f930 	bl	8001f34 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0e3      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ce2:	4b74      	ldr	r3, [pc, #464]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d0f1      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	22f8      	movs	r2, #248	; 0xf8
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	00da      	lsls	r2, r3, #3
 8002cfc:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
 8002d02:	e034      	b.n	8002d6e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	3305      	adds	r3, #5
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d0c:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	438a      	bics	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	22f8      	movs	r2, #248	; 0xf8
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	e01e      	b.n	8002d6e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d30:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d36:	2104      	movs	r1, #4
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d3c:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7ff f8f4 	bl	8001f34 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d52:	f7ff f8ef 	bl	8001f34 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0a2      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f1      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4e4>
 8002d76:	e097      	b.n	8002ea8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d78:	4b4e      	ldr	r3, [pc, #312]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d100      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4f2>
 8002d84:	e06b      	b.n	8002e5e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d14c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002d94:	494a      	ldr	r1, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x62c>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f8cb 	bl	8001f34 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff f8c6 	bl	8001f34 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e079      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	049b      	lsls	r3, r3, #18
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	4393      	bics	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <HAL_RCC_OscConfig+0x630>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	431a      	orrs	r2, r3
 8002dea:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0449      	lsls	r1, r1, #17
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7ff f899 	bl	8001f34 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff f894 	bl	8001f34 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e047      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	049b      	lsls	r3, r3, #18
 8002e22:	4013      	ands	r3, r2
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x574>
 8002e26:	e03f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e2e:	4924      	ldr	r1, [pc, #144]	; (8002ec0 <HAL_RCC_OscConfig+0x62c>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff f87e 	bl	8001f34 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7ff f879 	bl	8001f34 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e02c      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	049b      	lsls	r3, r3, #18
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x5aa>
 8002e5c:	e024      	b.n	8002ea8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e01f      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCC_OscConfig+0x620>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	025b      	lsls	r3, r3, #9
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	220f      	movs	r2, #15
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	23f0      	movs	r3, #240	; 0xf0
 8002e98:	039b      	lsls	r3, r3, #14
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b008      	add	sp, #32
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff
 8002ec0:	feffffff 	.word	0xfeffffff
 8002ec4:	ffc2ffff 	.word	0xffc2ffff

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b3      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d911      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4393      	bics	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	4b55      	ldr	r3, [pc, #340]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e09a      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d006      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f28:	21e0      	movs	r1, #224	; 0xe0
 8002f2a:	00c9      	lsls	r1, r1, #3
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	22f0      	movs	r2, #240	; 0xf0
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b44      	ldr	r3, [pc, #272]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d040      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d114      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06e      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	4013      	ands	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e062      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e05b      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2203      	movs	r2, #3
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe ffc8 	bl	8001f34 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fe ffc3 	bl	8001f34 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_RCC_ClockConfig+0x18c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e042      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1ec      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d211      	bcs.n	8003002 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x184>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e020      	b.n	8003044 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_RCC_ClockConfig+0x190>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003020:	f000 f820 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003024:	0001      	movs	r1, r0
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x188>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	220f      	movs	r2, #15
 800302e:	4013      	ands	r3, r2
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x194>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	000a      	movs	r2, r1
 8003036:	40da      	lsrs	r2, r3
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x198>)
 800303a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800303c:	2003      	movs	r0, #3
 800303e:	f7fe ff33 	bl	8001ea8 <HAL_InitTick>
  
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b004      	add	sp, #16
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40022000 	.word	0x40022000
 8003050:	40021000 	.word	0x40021000
 8003054:	00001388 	.word	0x00001388
 8003058:	fffff8ff 	.word	0xfffff8ff
 800305c:	08005a38 	.word	0x08005a38
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b08f      	sub	sp, #60	; 0x3c
 8003068:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800306a:	2314      	movs	r3, #20
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003070:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003072:	c313      	stmia	r3!, {r0, r1, r4}
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_RCC_GetSysClockFreq+0xbc>)
 800307c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800307e:	c313      	stmia	r3!, {r0, r1, r4}
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
 800308c:	2300      	movs	r3, #0
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	220c      	movs	r2, #12
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d002      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x4a>
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d003      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x50>
 80030ac:	e02d      	b.n	800310a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b2:	e02d      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	220f      	movs	r2, #15
 80030ba:	4013      	ands	r3, r2
 80030bc:	2214      	movs	r2, #20
 80030be:	18ba      	adds	r2, r7, r2
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	220f      	movs	r2, #15
 80030ca:	4013      	ands	r3, r2
 80030cc:	1d3a      	adds	r2, r7, #4
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	025b      	lsls	r3, r3, #9
 80030d8:	4013      	ands	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e0:	f7fd f824 	bl	800012c <__udivsi3>
 80030e4:	0003      	movs	r3, r0
 80030e6:	001a      	movs	r2, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	4353      	muls	r3, r2
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
 80030ee:	e009      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f2:	000a      	movs	r2, r1
 80030f4:	0152      	lsls	r2, r2, #5
 80030f6:	1a52      	subs	r2, r2, r1
 80030f8:	0193      	lsls	r3, r2, #6
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	185b      	adds	r3, r3, r1
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003108:	e002      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc4>)
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800310e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b00f      	add	sp, #60	; 0x3c
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	080059d8 	.word	0x080059d8
 8003120:	080059e8 	.word	0x080059e8
 8003124:	40021000 	.word	0x40021000
 8003128:	007a1200 	.word	0x007a1200

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b02      	ldr	r3, [pc, #8]	; (800313c <HAL_RCC_GetHCLKFreq+0x10>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000000 	.word	0x20000000

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003144:	f7ff fff2 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003148:	0001      	movs	r1, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	2207      	movs	r2, #7
 8003152:	4013      	ands	r3, r2
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	40d9      	lsrs	r1, r3
 800315a:	000b      	movs	r3, r1
}    
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	40021000 	.word	0x40021000
 8003168:	08005a48 	.word	0x08005a48

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	4013      	ands	r3, r2
 8003186:	d100      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003188:	e08e      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2017      	movs	r0, #23
 800318c:	183b      	adds	r3, r7, r0
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	055b      	lsls	r3, r3, #21
 800319a:	4013      	ands	r3, r2
 800319c:	d110      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0549      	lsls	r1, r1, #21
 80031a8:	430a      	orrs	r2, r1
 80031aa:	61da      	str	r2, [r3, #28]
 80031ac:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	055b      	lsls	r3, r3, #21
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	183b      	adds	r3, r7, r0
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	d11a      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031cc:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	0049      	lsls	r1, r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe feab 	bl	8001f34 <HAL_GetTick>
 80031de:	0003      	movs	r3, r0
 80031e0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	e008      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e4:	f7fe fea6 	bl	8001f34 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e077      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4013      	ands	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d034      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	23c0      	movs	r3, #192	; 0xc0
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4013      	ands	r3, r2
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d02c      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800322a:	4013      	ands	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0249      	lsls	r1, r1, #9
 8003238:	430a      	orrs	r2, r1
 800323a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003242:	492e      	ldr	r1, [pc, #184]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003244:	400a      	ands	r2, r1
 8003246:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003248:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fe6d 	bl	8001f34 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e009      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe fe68 	bl	8001f34 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	4a25      	ldr	r2, [pc, #148]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e038      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	2202      	movs	r2, #2
 800327a:	4013      	ands	r3, r2
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003284:	4013      	ands	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800328e:	430a      	orrs	r2, r1
 8003290:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003292:	2317      	movs	r3, #23
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032a2:	4918      	ldr	r1, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	2203      	movs	r2, #3
 80032b8:	4393      	bics	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2210      	movs	r2, #16
 80032d6:	4393      	bics	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032e0:	430a      	orrs	r2, r1
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b006      	add	sp, #24
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
 80032f8:	fffffcff 	.word	0xfffffcff
 80032fc:	fffeffff 	.word	0xfffeffff
 8003300:	00001388 	.word	0x00001388
 8003304:	efffffff 	.word	0xefffffff

08003308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e042      	b.n	80033a0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223d      	movs	r2, #61	; 0x3d
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	223c      	movs	r2, #60	; 0x3c
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe fc4f 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	223d      	movs	r2, #61	; 0x3d
 800333a:	2102      	movs	r1, #2
 800333c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f000 fd89 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2246      	movs	r2, #70	; 0x46
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223e      	movs	r2, #62	; 0x3e
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	223f      	movs	r2, #63	; 0x3f
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2242      	movs	r2, #66	; 0x42
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2243      	movs	r2, #67	; 0x43
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2244      	movs	r2, #68	; 0x44
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2245      	movs	r2, #69	; 0x45
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223d      	movs	r2, #61	; 0x3d
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	001a      	movs	r2, r3
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2317      	movs	r3, #23
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <HAL_TIM_PWM_Start_DMA+0x32>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	223e      	movs	r2, #62	; 0x3e
 80033cc:	5c9b      	ldrb	r3, [r3, r2]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3b02      	subs	r3, #2
 80033d2:	425a      	negs	r2, r3
 80033d4:	4153      	adcs	r3, r2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e01f      	b.n	800341a <HAL_TIM_PWM_Start_DMA+0x72>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d108      	bne.n	80033f2 <HAL_TIM_PWM_Start_DMA+0x4a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	223f      	movs	r2, #63	; 0x3f
 80033e4:	5c9b      	ldrb	r3, [r3, r2]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3b02      	subs	r3, #2
 80033ea:	425a      	negs	r2, r3
 80033ec:	4153      	adcs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e013      	b.n	800341a <HAL_TIM_PWM_Start_DMA+0x72>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d108      	bne.n	800340a <HAL_TIM_PWM_Start_DMA+0x62>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2240      	movs	r2, #64	; 0x40
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3b02      	subs	r3, #2
 8003402:	425a      	negs	r2, r3
 8003404:	4153      	adcs	r3, r2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	e007      	b.n	800341a <HAL_TIM_PWM_Start_DMA+0x72>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2241      	movs	r2, #65	; 0x41
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3b02      	subs	r3, #2
 8003414:	425a      	negs	r2, r3
 8003416:	4153      	adcs	r3, r2
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	e154      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d108      	bne.n	800343a <HAL_TIM_PWM_Start_DMA+0x92>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	223e      	movs	r2, #62	; 0x3e
 800342c:	5c9b      	ldrb	r3, [r3, r2]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	425a      	negs	r2, r3
 8003434:	4153      	adcs	r3, r2
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e01f      	b.n	800347a <HAL_TIM_PWM_Start_DMA+0xd2>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d108      	bne.n	8003452 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	223f      	movs	r2, #63	; 0x3f
 8003444:	5c9b      	ldrb	r3, [r3, r2]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	425a      	negs	r2, r3
 800344c:	4153      	adcs	r3, r2
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e013      	b.n	800347a <HAL_TIM_PWM_Start_DMA+0xd2>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d108      	bne.n	800346a <HAL_TIM_PWM_Start_DMA+0xc2>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	425a      	negs	r2, r3
 8003464:	4153      	adcs	r3, r2
 8003466:	b2db      	uxtb	r3, r3
 8003468:	e007      	b.n	800347a <HAL_TIM_PWM_Start_DMA+0xd2>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2241      	movs	r2, #65	; 0x41
 800346e:	5c9b      	ldrb	r3, [r3, r2]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	425a      	negs	r2, r3
 8003476:	4153      	adcs	r3, r2
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d025      	beq.n	80034ca <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_TIM_PWM_Start_DMA+0xe8>
 8003484:	1cbb      	adds	r3, r7, #2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e11d      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	223e      	movs	r2, #62	; 0x3e
 800349a:	2102      	movs	r1, #2
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	e016      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x126>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d104      	bne.n	80034b0 <HAL_TIM_PWM_Start_DMA+0x108>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	2102      	movs	r1, #2
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	e00e      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x126>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d104      	bne.n	80034c0 <HAL_TIM_PWM_Start_DMA+0x118>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	2102      	movs	r1, #2
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	e006      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x126>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2241      	movs	r2, #65	; 0x41
 80034c4:	2102      	movs	r1, #2
 80034c6:	5499      	strb	r1, [r3, r2]
 80034c8:	e001      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0fe      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
  }

  switch (Channel)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d100      	bne.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x12e>
 80034d4:	e080      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x230>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d900      	bls.n	80034de <HAL_TIM_PWM_Start_DMA+0x136>
 80034dc:	e0a1      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x27a>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d054      	beq.n	800358e <HAL_TIM_PWM_Start_DMA+0x1e6>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d900      	bls.n	80034ec <HAL_TIM_PWM_Start_DMA+0x144>
 80034ea:	e09a      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x27a>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_PWM_Start_DMA+0x152>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d025      	beq.n	8003544 <HAL_TIM_PWM_Start_DMA+0x19c>
 80034f8:	e093      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	4a74      	ldr	r2, [pc, #464]	; (80036d8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	4a73      	ldr	r2, [pc, #460]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003510:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3334      	adds	r3, #52	; 0x34
 800351e:	001a      	movs	r2, r3
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f7fe fe5a 	bl	80021dc <HAL_DMA_Start_IT>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0cd      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	0089      	lsls	r1, r1, #2
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
      break;
 8003542:	e073      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	4a62      	ldr	r2, [pc, #392]	; (80036d4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	4a60      	ldr	r2, [pc, #384]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x334>)
 800355a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3338      	adds	r3, #56	; 0x38
 8003568:	001a      	movs	r2, r3
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f7fe fe35 	bl	80021dc <HAL_DMA_Start_IT>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0a8      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	00c9      	lsls	r1, r1, #3
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
      break;
 800358c:	e04e      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x334>)
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	333c      	adds	r3, #60	; 0x3c
 80035b2:	001a      	movs	r2, r3
 80035b4:	1cbb      	adds	r3, r7, #2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f7fe fe10 	bl	80021dc <HAL_DMA_Start_IT>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e083      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	0109      	lsls	r1, r1, #4
 80035d2:	430a      	orrs	r2, r1
 80035d4:	60da      	str	r2, [r3, #12]
      break;
 80035d6:	e029      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <HAL_TIM_PWM_Start_DMA+0x334>)
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3340      	adds	r3, #64	; 0x40
 80035fc:	001a      	movs	r2, r3
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	f7fe fdeb 	bl	80021dc <HAL_DMA_Start_IT>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d001      	beq.n	800360e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e05e      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0149      	lsls	r1, r1, #5
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]
      break;
 8003620:	e004      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
      break;
 800362a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d147      	bne.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x31e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	2201      	movs	r2, #1
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fe5a 	bl	80042f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x338>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x2ba>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_TIM_PWM_Start_DMA+0x2c0>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	0209      	lsls	r1, r1, #8
 800367a:	430a      	orrs	r2, r1
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x2ea>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_TIM_PWM_Start_DMA+0x344>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d111      	bne.n	80036b6 <HAL_TIM_PWM_Start_DMA+0x30e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2207      	movs	r2, #7
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d010      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x31e>
      {
        __HAL_TIM_ENABLE(htim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	e007      	b.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x31e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b006      	add	sp, #24
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	08003d4d 	.word	0x08003d4d
 80036d8:	08003df7 	.word	0x08003df7
 80036dc:	08003cb9 	.word	0x08003cb9
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	40000400 	.word	0x40000400

080036f0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d039      	beq.n	800377c <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d844      	bhi.n	8003798 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d025      	beq.n	8003760 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b08      	cmp	r3, #8
 8003718:	d83e      	bhi.n	8003798 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00e      	beq.n	8003744 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003726:	e037      	b.n	8003798 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4951      	ldr	r1, [pc, #324]	; (8003878 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003734:	400a      	ands	r2, r1
 8003736:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	0018      	movs	r0, r3
 800373e:	f7fe fdeb 	bl	8002318 <HAL_DMA_Abort_IT>
      break;
 8003742:	e02e      	b.n	80037a2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	494b      	ldr	r1, [pc, #300]	; (800387c <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8003750:	400a      	ands	r2, r1
 8003752:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	0018      	movs	r0, r3
 800375a:	f7fe fddd 	bl	8002318 <HAL_DMA_Abort_IT>
      break;
 800375e:	e020      	b.n	80037a2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4945      	ldr	r1, [pc, #276]	; (8003880 <HAL_TIM_PWM_Stop_DMA+0x190>)
 800376c:	400a      	ands	r2, r1
 800376e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	0018      	movs	r0, r3
 8003776:	f7fe fdcf 	bl	8002318 <HAL_DMA_Abort_IT>
      break;
 800377a:	e012      	b.n	80037a2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	493f      	ldr	r1, [pc, #252]	; (8003884 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8003788:	400a      	ands	r2, r1
 800378a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	0018      	movs	r0, r3
 8003792:	f7fe fdc1 	bl	8002318 <HAL_DMA_Abort_IT>
      break;
 8003796:	e004      	b.n	80037a2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003798:	230f      	movs	r3, #15
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
      break;
 80037a0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80037a2:	230f      	movs	r3, #15
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d15e      	bne.n	800386a <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 fd9f 	bl	80042f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a32      	ldr	r2, [pc, #200]	; (8003888 <HAL_TIM_PWM_Stop_DMA+0x198>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_PWM_Stop_DMA+0xe8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_PWM_Stop_DMA+0xe8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2f      	ldr	r2, [pc, #188]	; (8003890 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_PWM_Stop_DMA+0xec>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_TIM_PWM_Stop_DMA+0xee>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d013      	beq.n	800380a <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	d10d      	bne.n	800380a <HAL_TIM_PWM_Stop_DMA+0x11a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	d107      	bne.n	800380a <HAL_TIM_PWM_Stop_DMA+0x11a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4925      	ldr	r1, [pc, #148]	; (800389c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003806:	400a      	ands	r2, r1
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003812:	4013      	ands	r3, r2
 8003814:	d10d      	bne.n	8003832 <HAL_TIM_PWM_Stop_DMA+0x142>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 800381e:	4013      	ands	r3, r2
 8003820:	d107      	bne.n	8003832 <HAL_TIM_PWM_Stop_DMA+0x142>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	438a      	bics	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Stop_DMA+0x152>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	223e      	movs	r2, #62	; 0x3e
 800383c:	2101      	movs	r1, #1
 800383e:	5499      	strb	r1, [r3, r2]
 8003840:	e013      	b.n	800386a <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Stop_DMA+0x162>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]
 8003850:	e00b      	b.n	800386a <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Stop_DMA+0x172>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]
 8003860:	e003      	b.n	800386a <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2241      	movs	r2, #65	; 0x41
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}
 8003878:	fffffdff 	.word	0xfffffdff
 800387c:	fffffbff 	.word	0xfffffbff
 8003880:	fffff7ff 	.word	0xfffff7ff
 8003884:	ffffefff 	.word	0xffffefff
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40014400 	.word	0x40014400
 8003890:	40014800 	.word	0x40014800
 8003894:	00001111 	.word	0x00001111
 8003898:	00000444 	.word	0x00000444
 800389c:	ffff7fff 	.word	0xffff7fff

080038a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d124      	bne.n	8003900 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11d      	bne.n	8003900 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2203      	movs	r2, #3
 80038ca:	4252      	negs	r2, r2
 80038cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2203      	movs	r2, #3
 80038dc:	4013      	ands	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f9c8 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e007      	b.n	80038fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f9bb 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fd fc97 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2204      	movs	r2, #4
 8003908:	4013      	ands	r3, r2
 800390a:	2b04      	cmp	r3, #4
 800390c:	d125      	bne.n	800395a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2204      	movs	r2, #4
 8003916:	4013      	ands	r3, r2
 8003918:	2b04      	cmp	r3, #4
 800391a:	d11e      	bne.n	800395a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2205      	movs	r2, #5
 8003922:	4252      	negs	r2, r2
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	23c0      	movs	r3, #192	; 0xc0
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4013      	ands	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f99b 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003942:	e007      	b.n	8003954 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f98e 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f7fd fc6a 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2208      	movs	r2, #8
 8003962:	4013      	ands	r3, r2
 8003964:	2b08      	cmp	r3, #8
 8003966:	d124      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2208      	movs	r2, #8
 8003970:	4013      	ands	r3, r2
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11d      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2209      	movs	r2, #9
 800397c:	4252      	negs	r2, r2
 800397e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2203      	movs	r2, #3
 800398e:	4013      	ands	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f96f 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 800399a:	e007      	b.n	80039ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f962 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fd fc3e 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2210      	movs	r2, #16
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d125      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2210      	movs	r2, #16
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d11e      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2211      	movs	r2, #17
 80039d4:	4252      	negs	r2, r2
 80039d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2208      	movs	r2, #8
 80039dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	23c0      	movs	r3, #192	; 0xc0
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f942 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e007      	b.n	8003a06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 f935 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7fd fc11 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2201      	movs	r2, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10f      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d108      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4252      	negs	r2, r2
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 f90f 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d10f      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d108      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2281      	movs	r2, #129	; 0x81
 8003a5c:	4252      	negs	r2, r2
 8003a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fcc6 	bl	80043f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d10f      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d108      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2241      	movs	r2, #65	; 0x41
 8003a8a:	4252      	negs	r2, r2
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f901 	bl	8003c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d108      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2221      	movs	r2, #33	; 0x21
 8003ab8:	4252      	negs	r2, r2
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fc90 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2317      	movs	r3, #23
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	223c      	movs	r2, #60	; 0x3c
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x22>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ad      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	223c      	movs	r2, #60	; 0x3c
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d100      	bne.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x32>
 8003afc:	e076      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x120>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d900      	bls.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003b04:	e095      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d04e      	beq.n	8003baa <HAL_TIM_PWM_ConfigChannel+0xde>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d900      	bls.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003b12:	e08e      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d021      	beq.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003b20:	e087      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	0011      	movs	r1, r2
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 fa04 	bl	8003f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2108      	movs	r1, #8
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
      break;
 8003b62:	e06b      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 fa61 	bl	8004034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	0109      	lsls	r1, r1, #4
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4931      	ldr	r1, [pc, #196]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]
      break;
 8003ba8:	e048      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fabc 	bl	8004130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69d9      	ldr	r1, [r3, #28]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	61da      	str	r2, [r3, #28]
      break;
 8003bea:	e027      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fb1b 	bl	8004230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0109      	lsls	r1, r1, #4
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	490f      	ldr	r1, [pc, #60]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69d9      	ldr	r1, [r3, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	021a      	lsls	r2, r3, #8
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	61da      	str	r2, [r3, #28]
      break;
 8003c30:	e004      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003c32:	2317      	movs	r3, #23
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
      break;
 8003c3a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	223c      	movs	r2, #60	; 0x3c
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

  return status;
 8003c44:	2317      	movs	r3, #23
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	781b      	ldrb	r3, [r3, #0]
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b006      	add	sp, #24
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	fffffbff 	.word	0xfffffbff

08003c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b002      	add	sp, #8
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	223e      	movs	r2, #62	; 0x3e
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]
 8003cde:	e02a      	b.n	8003d36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d107      	bne.n	8003cfa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2202      	movs	r2, #2
 8003cee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	223f      	movs	r2, #63	; 0x3f
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	5499      	strb	r1, [r3, r2]
 8003cf8:	e01d      	b.n	8003d36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2204      	movs	r2, #4
 8003d08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	e010      	b.n	8003d36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d107      	bne.n	8003d2e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2241      	movs	r2, #65	; 0x41
 8003d28:	2101      	movs	r1, #1
 8003d2a:	5499      	strb	r1, [r3, r2]
 8003d2c:	e003      	b.n	8003d36 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	223d      	movs	r2, #61	; 0x3d
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff ffb5 	bl	8003ca8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d10b      	bne.n	8003d7c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d136      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	223e      	movs	r2, #62	; 0x3e
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	e031      	b.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10b      	bne.n	8003d9e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d125      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	223f      	movs	r2, #63	; 0x3f
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]
 8003d9c:	e020      	b.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d10b      	bne.n	8003dc0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2204      	movs	r2, #4
 8003dac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2240      	movs	r2, #64	; 0x40
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	e00f      	b.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d10a      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2241      	movs	r2, #65	; 0x41
 8003ddc:	2101      	movs	r1, #1
 8003dde:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fd fa20 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	771a      	strb	r2, [r3, #28]
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b004      	add	sp, #16
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d103      	bne.n	8003e16 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	771a      	strb	r2, [r3, #28]
 8003e14:	e019      	b.n	8003e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d103      	bne.n	8003e28 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2202      	movs	r2, #2
 8003e24:	771a      	strb	r2, [r3, #28]
 8003e26:	e010      	b.n	8003e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d103      	bne.n	8003e3a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2204      	movs	r2, #4
 8003e36:	771a      	strb	r2, [r3, #28]
 8003e38:	e007      	b.n	8003e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d102      	bne.n	8003e4a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2208      	movs	r2, #8
 8003e48:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff ff1b 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b004      	add	sp, #16
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x20>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <TIM_Base_SetConfig+0xc4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2270      	movs	r2, #112	; 0x70
 8003e84:	4393      	bics	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_Base_SetConfig+0x5a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <TIM_Base_SetConfig+0xc4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0x5a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <TIM_Base_SetConfig+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0x5a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <TIM_Base_SetConfig+0xcc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0x5a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <TIM_Base_SetConfig+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <TIM_Base_SetConfig+0xd4>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0xaa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <TIM_Base_SetConfig+0xcc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0xaa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <TIM_Base_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d103      	bne.n	8003f12 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	615a      	str	r2, [r3, #20]
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40002000 	.word	0x40002000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	fffffcff 	.word	0xfffffcff

08003f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	2201      	movs	r2, #1
 8003f48:	4393      	bics	r3, r2
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2270      	movs	r2, #112	; 0x70
 8003f66:	4393      	bics	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	4393      	bics	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	4393      	bics	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <TIM_OC1_SetConfig+0xe8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <TIM_OC1_SetConfig+0x6e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_OC1_SetConfig+0xec>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC1_SetConfig+0x6e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC1_SetConfig+0xf0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10c      	bne.n	8003fc0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	4393      	bics	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <TIM_OC1_SetConfig+0xe8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_OC1_SetConfig+0xa0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a16      	ldr	r2, [pc, #88]	; (8004024 <TIM_OC1_SetConfig+0xec>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC1_SetConfig+0xa0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	; (8004028 <TIM_OC1_SetConfig+0xf0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4a14      	ldr	r2, [pc, #80]	; (800402c <TIM_OC1_SetConfig+0xf4>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4a13      	ldr	r2, [pc, #76]	; (8004030 <TIM_OC1_SetConfig+0xf8>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b006      	add	sp, #24
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800
 800402c:	fffffeff 	.word	0xfffffeff
 8004030:	fffffdff 	.word	0xfffffdff

08004034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	2210      	movs	r2, #16
 8004044:	4393      	bics	r3, r2
 8004046:	001a      	movs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <TIM_OC2_SetConfig+0xe0>)
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <TIM_OC2_SetConfig+0xe4>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2220      	movs	r2, #32
 800407e:	4393      	bics	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_OC2_SetConfig+0xe8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10d      	bne.n	80040b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	4393      	bics	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	4393      	bics	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <TIM_OC2_SetConfig+0xe8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC2_SetConfig+0x96>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a18      	ldr	r2, [pc, #96]	; (8004120 <TIM_OC2_SetConfig+0xec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC2_SetConfig+0x96>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a17      	ldr	r2, [pc, #92]	; (8004124 <TIM_OC2_SetConfig+0xf0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d113      	bne.n	80040f2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4a16      	ldr	r2, [pc, #88]	; (8004128 <TIM_OC2_SetConfig+0xf4>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <TIM_OC2_SetConfig+0xf8>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffff8fff 	.word	0xffff8fff
 8004118:	fffffcff 	.word	0xfffffcff
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	fffffbff 	.word	0xfffffbff
 800412c:	fffff7ff 	.word	0xfffff7ff

08004130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a33      	ldr	r2, [pc, #204]	; (800420c <TIM_OC3_SetConfig+0xdc>)
 8004140:	401a      	ands	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2270      	movs	r2, #112	; 0x70
 800415c:	4393      	bics	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2203      	movs	r2, #3
 8004164:	4393      	bics	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4a26      	ldr	r2, [pc, #152]	; (8004210 <TIM_OC3_SetConfig+0xe0>)
 8004176:	4013      	ands	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <TIM_OC3_SetConfig+0xe4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10d      	bne.n	80041aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <TIM_OC3_SetConfig+0xe8>)
 8004192:	4013      	ands	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <TIM_OC3_SetConfig+0xec>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <TIM_OC3_SetConfig+0xe4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_OC3_SetConfig+0x92>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <TIM_OC3_SetConfig+0xf0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC3_SetConfig+0x92>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <TIM_OC3_SetConfig+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d113      	bne.n	80041ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <TIM_OC3_SetConfig+0xf8>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <TIM_OC3_SetConfig+0xfc>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b006      	add	sp, #24
 800420a:	bd80      	pop	{r7, pc}
 800420c:	fffffeff 	.word	0xfffffeff
 8004210:	fffffdff 	.word	0xfffffdff
 8004214:	40012c00 	.word	0x40012c00
 8004218:	fffff7ff 	.word	0xfffff7ff
 800421c:	fffffbff 	.word	0xfffffbff
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800
 8004228:	ffffefff 	.word	0xffffefff
 800422c:	ffffdfff 	.word	0xffffdfff

08004230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <TIM_OC4_SetConfig+0xa8>)
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a20      	ldr	r2, [pc, #128]	; (80042dc <TIM_OC4_SetConfig+0xac>)
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <TIM_OC4_SetConfig+0xb0>)
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <TIM_OC4_SetConfig+0xb4>)
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <TIM_OC4_SetConfig+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_OC4_SetConfig+0x70>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <TIM_OC4_SetConfig+0xbc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC4_SetConfig+0x70>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <TIM_OC4_SetConfig+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <TIM_OC4_SetConfig+0xc4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b006      	add	sp, #24
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	ffffefff 	.word	0xffffefff
 80042dc:	ffff8fff 	.word	0xffff8fff
 80042e0:	fffffcff 	.word	0xfffffcff
 80042e4:	ffffdfff 	.word	0xffffdfff
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	ffffbfff 	.word	0xffffbfff

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	221f      	movs	r2, #31
 8004308:	4013      	ands	r3, r2
 800430a:	2201      	movs	r2, #1
 800430c:	409a      	lsls	r2, r3
 800430e:	0013      	movs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	43d2      	mvns	r2, r2
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	211f      	movs	r1, #31
 8004328:	400b      	ands	r3, r1
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4099      	lsls	r1, r3
 800432e:	000b      	movs	r3, r1
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b006      	add	sp, #24
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	223c      	movs	r2, #60	; 0x3c
 800434e:	5c9b      	ldrb	r3, [r3, r2]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004354:	2302      	movs	r3, #2
 8004356:	e03c      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	223c      	movs	r2, #60	; 0x3c
 800435c:	2101      	movs	r1, #1
 800435e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	223d      	movs	r2, #61	; 0x3d
 8004364:	2102      	movs	r1, #2
 8004366:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2270      	movs	r2, #112	; 0x70
 800437c:	4393      	bics	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a11      	ldr	r2, [pc, #68]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	4393      	bics	r3, r2
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	223d      	movs	r2, #61	; 0x3d
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	223c      	movs	r2, #60	; 0x3c
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e044      	b.n	80044a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2274      	movs	r2, #116	; 0x74
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fd fc67 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2224      	movs	r2, #36	; 0x24
 8004432:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2101      	movs	r1, #1
 8004440:	438a      	bics	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 fc16 	bl	8004c78 <UART_SetConfig>
 800444c:	0003      	movs	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e024      	b.n	80044a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fd33 	bl	8004ecc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	490d      	ldr	r1, [pc, #52]	; (80044a8 <HAL_UART_Init+0xa4>)
 8004472:	400a      	ands	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2108      	movs	r1, #8
 8004482:	438a      	bics	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fdcb 	bl	8005034 <UART_CheckIdleState>
 800449e:	0003      	movs	r3, r0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	fffff7ff 	.word	0xfffff7ff

080044ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	1dbb      	adds	r3, r7, #6
 80044ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d000      	beq.n	80044c6 <HAL_UART_Transmit+0x1a>
 80044c4:	e096      	b.n	80045f4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_UART_Transmit+0x28>
 80044cc:	1dbb      	adds	r3, r7, #6
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e08e      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d109      	bne.n	80044f8 <HAL_UART_Transmit+0x4c>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2201      	movs	r2, #1
 80044f0:	4013      	ands	r3, r2
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e07e      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2274      	movs	r2, #116	; 0x74
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Transmit+0x5a>
 8004502:	2302      	movs	r3, #2
 8004504:	e077      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2274      	movs	r2, #116	; 0x74
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	2100      	movs	r1, #0
 8004514:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2221      	movs	r2, #33	; 0x21
 800451a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451c:	f7fd fd0a 	bl	8001f34 <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1dba      	adds	r2, r7, #6
 8004528:	2150      	movs	r1, #80	; 0x50
 800452a:	8812      	ldrh	r2, [r2, #0]
 800452c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1dba      	adds	r2, r7, #6
 8004532:	2152      	movs	r1, #82	; 0x52
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	015b      	lsls	r3, r3, #5
 8004540:	429a      	cmp	r2, r3
 8004542:	d108      	bne.n	8004556 <HAL_UART_Transmit+0xaa>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e003      	b.n	800455e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2274      	movs	r2, #116	; 0x74
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004566:	e02d      	b.n	80045c4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	0013      	movs	r3, r2
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	f000 fda5 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 800457a:	1e03      	subs	r3, r0, #0
 800457c:	d001      	beq.n	8004582 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e039      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	881a      	ldrh	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	05d2      	lsls	r2, r2, #23
 8004592:	0dd2      	lsrs	r2, r2, #23
 8004594:	b292      	uxth	r2, r2
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3302      	adds	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e008      	b.n	80045b2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b292      	uxth	r2, r2
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2252      	movs	r2, #82	; 0x52
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b299      	uxth	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2252      	movs	r2, #82	; 0x52
 80045c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2252      	movs	r2, #82	; 0x52
 80045c8:	5a9b      	ldrh	r3, [r3, r2]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1cb      	bne.n	8004568 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	0013      	movs	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	2140      	movs	r1, #64	; 0x40
 80045de:	f000 fd71 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d001      	beq.n	80045ea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e005      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b008      	add	sp, #32
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b088      	sub	sp, #32
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	1dbb      	adds	r3, r7, #6
 800460a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004610:	2b20      	cmp	r3, #32
 8004612:	d150      	bne.n	80046b6 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_UART_Receive_IT+0x24>
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e048      	b.n	80046b8 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	015b      	lsls	r3, r3, #5
 800462e:	429a      	cmp	r2, r3
 8004630:	d109      	bne.n	8004646 <HAL_UART_Receive_IT+0x48>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	d001      	beq.n	8004646 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e038      	b.n	80046b8 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2274      	movs	r2, #116	; 0x74
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UART_Receive_IT+0x56>
 8004650:	2302      	movs	r3, #2
 8004652:	e031      	b.n	80046b8 <HAL_UART_Receive_IT+0xba>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2274      	movs	r2, #116	; 0x74
 8004658:	2101      	movs	r1, #1
 800465a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	4013      	ands	r3, r2
 800466e:	d019      	beq.n	80046a4 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	613b      	str	r3, [r7, #16]
  return(result);
 8004676:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	2301      	movs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	04c9      	lsls	r1, r1, #19
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046a4:	1dbb      	adds	r3, r7, #6
 80046a6:	881a      	ldrh	r2, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fdcd 	bl	800524c <UART_Start_Receive_IT>
 80046b2:	0003      	movs	r3, r0
 80046b4:	e000      	b.n	80046b8 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b008      	add	sp, #32
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b0ab      	sub	sp, #172	; 0xac
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	22a4      	movs	r2, #164	; 0xa4
 80046d0:	18b9      	adds	r1, r7, r2
 80046d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	20a0      	movs	r0, #160	; 0xa0
 80046dc:	1839      	adds	r1, r7, r0
 80046de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	219c      	movs	r1, #156	; 0x9c
 80046e8:	1879      	adds	r1, r7, r1
 80046ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ec:	0011      	movs	r1, r2
 80046ee:	18bb      	adds	r3, r7, r2
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a99      	ldr	r2, [pc, #612]	; (8004958 <HAL_UART_IRQHandler+0x298>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	2298      	movs	r2, #152	; 0x98
 80046f8:	18bc      	adds	r4, r7, r2
 80046fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046fc:	18bb      	adds	r3, r7, r2
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d114      	bne.n	800472e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004704:	187b      	adds	r3, r7, r1
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2220      	movs	r2, #32
 800470a:	4013      	ands	r3, r2
 800470c:	d00f      	beq.n	800472e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470e:	183b      	adds	r3, r7, r0
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2220      	movs	r2, #32
 8004714:	4013      	ands	r3, r2
 8004716:	d00a      	beq.n	800472e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471c:	2b00      	cmp	r3, #0
 800471e:	d100      	bne.n	8004722 <HAL_UART_IRQHandler+0x62>
 8004720:	e27e      	b.n	8004c20 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	0010      	movs	r0, r2
 800472a:	4798      	blx	r3
      }
      return;
 800472c:	e278      	b.n	8004c20 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800472e:	2398      	movs	r3, #152	; 0x98
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d100      	bne.n	800473a <HAL_UART_IRQHandler+0x7a>
 8004738:	e114      	b.n	8004964 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800473a:	239c      	movs	r3, #156	; 0x9c
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d106      	bne.n	8004754 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004746:	23a0      	movs	r3, #160	; 0xa0
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a83      	ldr	r2, [pc, #524]	; (800495c <HAL_UART_IRQHandler+0x29c>)
 800474e:	4013      	ands	r3, r2
 8004750:	d100      	bne.n	8004754 <HAL_UART_IRQHandler+0x94>
 8004752:	e107      	b.n	8004964 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004754:	23a4      	movs	r3, #164	; 0xa4
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d012      	beq.n	8004786 <HAL_UART_IRQHandler+0xc6>
 8004760:	23a0      	movs	r3, #160	; 0xa0
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4013      	ands	r3, r2
 800476c:	d00b      	beq.n	8004786 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	589b      	ldr	r3, [r3, r2]
 800477c:	2201      	movs	r2, #1
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004786:	23a4      	movs	r3, #164	; 0xa4
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2202      	movs	r2, #2
 800478e:	4013      	ands	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
 8004792:	239c      	movs	r3, #156	; 0x9c
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2201      	movs	r2, #1
 800479a:	4013      	ands	r3, r2
 800479c:	d00b      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2202      	movs	r2, #2
 80047a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	589b      	ldr	r3, [r3, r2]
 80047ac:	2204      	movs	r2, #4
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047b6:	23a4      	movs	r3, #164	; 0xa4
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2204      	movs	r2, #4
 80047be:	4013      	ands	r3, r2
 80047c0:	d011      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
 80047c2:	239c      	movs	r3, #156	; 0x9c
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2204      	movs	r2, #4
 80047d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	589b      	ldr	r3, [r3, r2]
 80047dc:	2202      	movs	r2, #2
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047e6:	23a4      	movs	r3, #164	; 0xa4
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	4013      	ands	r3, r2
 80047f0:	d017      	beq.n	8004822 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047f2:	23a0      	movs	r3, #160	; 0xa0
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2220      	movs	r2, #32
 80047fa:	4013      	ands	r3, r2
 80047fc:	d105      	bne.n	800480a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047fe:	239c      	movs	r3, #156	; 0x9c
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004808:	d00b      	beq.n	8004822 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2208      	movs	r2, #8
 8004810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2280      	movs	r2, #128	; 0x80
 8004816:	589b      	ldr	r3, [r3, r2]
 8004818:	2208      	movs	r2, #8
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004822:	23a4      	movs	r3, #164	; 0xa4
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4013      	ands	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_UART_IRQHandler+0x198>
 8004830:	23a0      	movs	r3, #160	; 0xa0
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	04db      	lsls	r3, r3, #19
 800483a:	4013      	ands	r3, r2
 800483c:	d00c      	beq.n	8004858 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	589b      	ldr	r3, [r3, r2]
 800484e:	2220      	movs	r2, #32
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	589b      	ldr	r3, [r3, r2]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d100      	bne.n	8004864 <HAL_UART_IRQHandler+0x1a4>
 8004862:	e1df      	b.n	8004c24 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004864:	23a4      	movs	r3, #164	; 0xa4
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004870:	23a0      	movs	r3, #160	; 0xa0
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2220      	movs	r2, #32
 8004878:	4013      	ands	r3, r2
 800487a:	d008      	beq.n	800488e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	0010      	movs	r0, r2
 800488c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	589b      	ldr	r3, [r3, r2]
 8004894:	2194      	movs	r1, #148	; 0x94
 8004896:	187a      	adds	r2, r7, r1
 8004898:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d004      	beq.n	80048b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2228      	movs	r2, #40	; 0x28
 80048ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048b0:	d047      	beq.n	8004942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fd65 	bl	8005384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d137      	bne.n	8004938 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c8:	f3ef 8310 	mrs	r3, PRIMASK
 80048cc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d0:	2090      	movs	r0, #144	; 0x90
 80048d2:	183a      	adds	r2, r7, r0
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	2301      	movs	r3, #1
 80048d8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2140      	movs	r1, #64	; 0x40
 80048ee:	438a      	bics	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_UART_IRQHandler+0x2a0>)
 800490e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	0018      	movs	r0, r3
 8004916:	f7fd fcff 	bl	8002318 <HAL_DMA_Abort_IT>
 800491a:	1e03      	subs	r3, r0, #0
 800491c:	d01a      	beq.n	8004954 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	0018      	movs	r0, r3
 800492a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e012      	b.n	8004954 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f98d 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004936:	e00d      	b.n	8004954 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f988 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e008      	b.n	8004954 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f983 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	2100      	movs	r1, #0
 8004950:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004952:	e167      	b.n	8004c24 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	46c0      	nop			; (mov r8, r8)
    return;
 8004956:	e165      	b.n	8004c24 <HAL_UART_IRQHandler+0x564>
 8004958:	0000080f 	.word	0x0000080f
 800495c:	04000120 	.word	0x04000120
 8004960:	08005449 	.word	0x08005449

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004968:	2b01      	cmp	r3, #1
 800496a:	d000      	beq.n	800496e <HAL_UART_IRQHandler+0x2ae>
 800496c:	e131      	b.n	8004bd2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800496e:	23a4      	movs	r3, #164	; 0xa4
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2210      	movs	r2, #16
 8004976:	4013      	ands	r3, r2
 8004978:	d100      	bne.n	800497c <HAL_UART_IRQHandler+0x2bc>
 800497a:	e12a      	b.n	8004bd2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800497c:	23a0      	movs	r3, #160	; 0xa0
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	4013      	ands	r3, r2
 8004986:	d100      	bne.n	800498a <HAL_UART_IRQHandler+0x2ca>
 8004988:	e123      	b.n	8004bd2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2210      	movs	r2, #16
 8004990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	4013      	ands	r3, r2
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d000      	beq.n	80049a2 <HAL_UART_IRQHandler+0x2e2>
 80049a0:	e09b      	b.n	8004ada <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	217e      	movs	r1, #126	; 0x7e
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d100      	bne.n	80049ba <HAL_UART_IRQHandler+0x2fa>
 80049b8:	e136      	b.n	8004c28 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2258      	movs	r2, #88	; 0x58
 80049be:	5a9b      	ldrh	r3, [r3, r2]
 80049c0:	187a      	adds	r2, r7, r1
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d300      	bcc.n	80049ca <HAL_UART_IRQHandler+0x30a>
 80049c8:	e12e      	b.n	8004c28 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	187a      	adds	r2, r7, r1
 80049ce:	215a      	movs	r1, #90	; 0x5a
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d06e      	beq.n	8004abc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80049e8:	2301      	movs	r3, #1
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	498e      	ldr	r1, [pc, #568]	; (8004c38 <HAL_UART_IRQHandler+0x578>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a10:	f3ef 8310 	mrs	r3, PRIMASK
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	677b      	str	r3, [r7, #116]	; 0x74
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2101      	movs	r1, #1
 8004a32:	438a      	bics	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a42:	f3ef 8310 	mrs	r3, PRIMASK
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2140      	movs	r1, #64	; 0x40
 8004a64:	438a      	bics	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fd fbf6 	bl	80022a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2258      	movs	r2, #88	; 0x58
 8004ac0:	5a9a      	ldrh	r2, [r3, r2]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	215a      	movs	r1, #90	; 0x5a
 8004ac6:	5a5b      	ldrh	r3, [r3, r1]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 f8c4 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ad8:	e0a6      	b.n	8004c28 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2258      	movs	r2, #88	; 0x58
 8004ade:	5a99      	ldrh	r1, [r3, r2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	225a      	movs	r2, #90	; 0x5a
 8004ae4:	5a9b      	ldrh	r3, [r3, r2]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	208e      	movs	r0, #142	; 0x8e
 8004aea:	183b      	adds	r3, r7, r0
 8004aec:	1a8a      	subs	r2, r1, r2
 8004aee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	225a      	movs	r2, #90	; 0x5a
 8004af4:	5a9b      	ldrh	r3, [r3, r2]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d100      	bne.n	8004afe <HAL_UART_IRQHandler+0x43e>
 8004afc:	e096      	b.n	8004c2c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d100      	bne.n	8004b08 <HAL_UART_IRQHandler+0x448>
 8004b06:	e091      	b.n	8004c2c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b08:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b10:	2488      	movs	r4, #136	; 0x88
 8004b12:	193a      	adds	r2, r7, r4
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	2301      	movs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4943      	ldr	r1, [pc, #268]	; (8004c3c <HAL_UART_IRQHandler+0x57c>)
 8004b2e:	400a      	ands	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	193b      	adds	r3, r7, r4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b40:	f3ef 8310 	mrs	r3, PRIMASK
 8004b44:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b48:	2484      	movs	r4, #132	; 0x84
 8004b4a:	193a      	adds	r2, r7, r4
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f383 8810 	msr	PRIMASK, r3
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	438a      	bics	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	193b      	adds	r3, r7, r4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b92:	2480      	movs	r4, #128	; 0x80
 8004b94:	193a      	adds	r2, r7, r4
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2110      	movs	r1, #16
 8004bb0:	438a      	bics	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc2:	183b      	adds	r3, r7, r0
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f000 f848 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd0:	e02c      	b.n	8004c2c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bd2:	23a4      	movs	r3, #164	; 0xa4
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2280      	movs	r2, #128	; 0x80
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bde:	23a0      	movs	r3, #160	; 0xa0
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	4013      	ands	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01e      	beq.n	8004c30 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	0010      	movs	r0, r2
 8004bfa:	4798      	blx	r3
    }
    return;
 8004bfc:	e018      	b.n	8004c30 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bfe:	23a4      	movs	r3, #164	; 0xa4
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	4013      	ands	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_UART_IRQHandler+0x572>
 8004c0a:	23a0      	movs	r3, #160	; 0xa0
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	4013      	ands	r3, r2
 8004c14:	d00d      	beq.n	8004c32 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fc2c 	bl	8005476 <UART_EndTransmit_IT>
    return;
 8004c1e:	e008      	b.n	8004c32 <HAL_UART_IRQHandler+0x572>
      return;
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	e006      	b.n	8004c32 <HAL_UART_IRQHandler+0x572>
    return;
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	e004      	b.n	8004c32 <HAL_UART_IRQHandler+0x572>
      return;
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	e002      	b.n	8004c32 <HAL_UART_IRQHandler+0x572>
      return;
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_IRQHandler+0x572>
    return;
 8004c30:	46c0      	nop			; (mov r8, r8)
  }

}
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b02b      	add	sp, #172	; 0xac
 8004c36:	bd90      	pop	{r4, r7, pc}
 8004c38:	fffffeff 	.word	0xfffffeff
 8004c3c:	fffffedf 	.word	0xfffffedf

08004c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	000a      	movs	r2, r1
 8004c6a:	1cbb      	adds	r3, r7, #2
 8004c6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c80:	231e      	movs	r3, #30
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a84      	ldr	r2, [pc, #528]	; (8004eb8 <UART_SetConfig+0x240>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a7f      	ldr	r2, [pc, #508]	; (8004ebc <UART_SetConfig+0x244>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a76      	ldr	r2, [pc, #472]	; (8004ec0 <UART_SetConfig+0x248>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf4:	4b73      	ldr	r3, [pc, #460]	; (8004ec4 <UART_SetConfig+0x24c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d00d      	beq.n	8004d1c <UART_SetConfig+0xa4>
 8004d00:	d81b      	bhi.n	8004d3a <UART_SetConfig+0xc2>
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d014      	beq.n	8004d30 <UART_SetConfig+0xb8>
 8004d06:	d818      	bhi.n	8004d3a <UART_SetConfig+0xc2>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <UART_SetConfig+0x9a>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d00a      	beq.n	8004d26 <UART_SetConfig+0xae>
 8004d10:	e013      	b.n	8004d3a <UART_SetConfig+0xc2>
 8004d12:	231f      	movs	r3, #31
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e012      	b.n	8004d42 <UART_SetConfig+0xca>
 8004d1c:	231f      	movs	r3, #31
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2202      	movs	r2, #2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e00d      	b.n	8004d42 <UART_SetConfig+0xca>
 8004d26:	231f      	movs	r3, #31
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e008      	b.n	8004d42 <UART_SetConfig+0xca>
 8004d30:	231f      	movs	r3, #31
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2208      	movs	r2, #8
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e003      	b.n	8004d42 <UART_SetConfig+0xca>
 8004d3a:	231f      	movs	r3, #31
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2210      	movs	r2, #16
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d15d      	bne.n	8004e0c <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8004d50:	231f      	movs	r3, #31
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d015      	beq.n	8004d86 <UART_SetConfig+0x10e>
 8004d5a:	dc18      	bgt.n	8004d8e <UART_SetConfig+0x116>
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d00d      	beq.n	8004d7c <UART_SetConfig+0x104>
 8004d60:	dc15      	bgt.n	8004d8e <UART_SetConfig+0x116>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <UART_SetConfig+0xf4>
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d005      	beq.n	8004d76 <UART_SetConfig+0xfe>
 8004d6a:	e010      	b.n	8004d8e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fe f9e8 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8004d70:	0003      	movs	r3, r0
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e012      	b.n	8004d9c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <UART_SetConfig+0x250>)
 8004d78:	61bb      	str	r3, [r7, #24]
        break;
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7c:	f7fe f972 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8004d80:	0003      	movs	r3, r0
 8004d82:	61bb      	str	r3, [r7, #24]
        break;
 8004d84:	e00a      	b.n	8004d9c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e006      	b.n	8004d9c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d92:	231e      	movs	r3, #30
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
        break;
 8004d9a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d100      	bne.n	8004da4 <UART_SetConfig+0x12c>
 8004da2:	e07b      	b.n	8004e9c <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	18d2      	adds	r2, r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0019      	movs	r1, r3
 8004db6:	0010      	movs	r0, r2
 8004db8:	f7fb f9b8 	bl	800012c <__udivsi3>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b0f      	cmp	r3, #15
 8004dc6:	d91c      	bls.n	8004e02 <UART_SetConfig+0x18a>
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	025b      	lsls	r3, r3, #9
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d217      	bcs.n	8004e02 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	200e      	movs	r0, #14
 8004dd8:	183b      	adds	r3, r7, r0
 8004dda:	210f      	movs	r1, #15
 8004ddc:	438a      	bics	r2, r1
 8004dde:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2207      	movs	r2, #7
 8004de8:	4013      	ands	r3, r2
 8004dea:	b299      	uxth	r1, r3
 8004dec:	183b      	adds	r3, r7, r0
 8004dee:	183a      	adds	r2, r7, r0
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	183a      	adds	r2, r7, r0
 8004dfc:	8812      	ldrh	r2, [r2, #0]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	e04c      	b.n	8004e9c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004e02:	231e      	movs	r3, #30
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e047      	b.n	8004e9c <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0c:	231f      	movs	r3, #31
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d015      	beq.n	8004e42 <UART_SetConfig+0x1ca>
 8004e16:	dc18      	bgt.n	8004e4a <UART_SetConfig+0x1d2>
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d00d      	beq.n	8004e38 <UART_SetConfig+0x1c0>
 8004e1c:	dc15      	bgt.n	8004e4a <UART_SetConfig+0x1d2>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0x1b0>
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d005      	beq.n	8004e32 <UART_SetConfig+0x1ba>
 8004e26:	e010      	b.n	8004e4a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe f98a 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e012      	b.n	8004e58 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <UART_SetConfig+0x250>)
 8004e34:	61bb      	str	r3, [r7, #24]
        break;
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e38:	f7fe f914 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e00a      	b.n	8004e58 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e006      	b.n	8004e58 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e4e:	231e      	movs	r3, #30
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
        break;
 8004e56:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01e      	beq.n	8004e9c <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085a      	lsrs	r2, r3, #1
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	18d2      	adds	r2, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	0010      	movs	r0, r2
 8004e70:	f7fb f95c 	bl	800012c <__udivsi3>
 8004e74:	0003      	movs	r3, r0
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d909      	bls.n	8004e94 <UART_SetConfig+0x21c>
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	025b      	lsls	r3, r3, #9
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d204      	bcs.n	8004e94 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e003      	b.n	8004e9c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004e94:	231e      	movs	r3, #30
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ea8:	231e      	movs	r3, #30
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b008      	add	sp, #32
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	ffff69f3 	.word	0xffff69f3
 8004ebc:	ffffcfff 	.word	0xffffcfff
 8004ec0:	fffff4ff 	.word	0xfffff4ff
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	007a1200 	.word	0x007a1200

08004ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <UART_AdvFeatureConfig+0x144>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2202      	movs	r2, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4a43      	ldr	r2, [pc, #268]	; (8005014 <UART_AdvFeatureConfig+0x148>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a3b      	ldr	r2, [pc, #236]	; (8005018 <UART_AdvFeatureConfig+0x14c>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2208      	movs	r2, #8
 8004f40:	4013      	ands	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4a34      	ldr	r2, [pc, #208]	; (800501c <UART_AdvFeatureConfig+0x150>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2210      	movs	r2, #16
 8004f62:	4013      	ands	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <UART_AdvFeatureConfig+0x154>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2220      	movs	r2, #32
 8004f84:	4013      	ands	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4a25      	ldr	r2, [pc, #148]	; (8005024 <UART_AdvFeatureConfig+0x158>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2240      	movs	r2, #64	; 0x40
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d01d      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a1d      	ldr	r2, [pc, #116]	; (8005028 <UART_AdvFeatureConfig+0x15c>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	035b      	lsls	r3, r3, #13
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10b      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a15      	ldr	r2, [pc, #84]	; (800502c <UART_AdvFeatureConfig+0x160>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2280      	movs	r2, #128	; 0x80
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <UART_AdvFeatureConfig+0x164>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}
 8005010:	fffdffff 	.word	0xfffdffff
 8005014:	fffeffff 	.word	0xfffeffff
 8005018:	fffbffff 	.word	0xfffbffff
 800501c:	ffff7fff 	.word	0xffff7fff
 8005020:	ffffefff 	.word	0xffffefff
 8005024:	ffffdfff 	.word	0xffffdfff
 8005028:	ffefffff 	.word	0xffefffff
 800502c:	ff9fffff 	.word	0xff9fffff
 8005030:	fff7ffff 	.word	0xfff7ffff

08005034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	2100      	movs	r1, #0
 8005042:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005044:	f7fc ff76 	bl	8001f34 <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2208      	movs	r2, #8
 8005054:	4013      	ands	r3, r2
 8005056:	2b08      	cmp	r3, #8
 8005058:	d10c      	bne.n	8005074 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	0391      	lsls	r1, r2, #14
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <UART_CheckIdleState+0x8c>)
 8005064:	9200      	str	r2, [sp, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f82c 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 800506c:	1e03      	subs	r3, r0, #0
 800506e:	d001      	beq.n	8005074 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e021      	b.n	80050b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2204      	movs	r2, #4
 800507c:	4013      	ands	r3, r2
 800507e:	2b04      	cmp	r3, #4
 8005080:	d10c      	bne.n	800509c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2280      	movs	r2, #128	; 0x80
 8005086:	03d1      	lsls	r1, r2, #15
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <UART_CheckIdleState+0x8c>)
 800508c:	9200      	str	r2, [sp, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	f000 f818 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8005094:	1e03      	subs	r3, r0, #0
 8005096:	d001      	beq.n	800509c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e00d      	b.n	80050b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2274      	movs	r2, #116	; 0x74
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	01ffffff 	.word	0x01ffffff

080050c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b094      	sub	sp, #80	; 0x50
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	1dfb      	adds	r3, r7, #7
 80050d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	e0a3      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d8:	3301      	adds	r3, #1
 80050da:	d100      	bne.n	80050de <UART_WaitOnFlagUntilTimeout+0x1a>
 80050dc:	e09f      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc ff29 	bl	8001f34 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13d      	bne.n	8005170 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f4:	f3ef 8310 	mrs	r3, PRIMASK
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
 80050fe:	2301      	movs	r3, #1
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	494c      	ldr	r1, [pc, #304]	; (8005248 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	643b      	str	r3, [r7, #64]	; 0x40
 8005130:	2301      	movs	r3, #1
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2274      	movs	r2, #116	; 0x74
 8005168:	2100      	movs	r1, #0
 800516a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e067      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2204      	movs	r2, #4
 8005178:	4013      	ands	r3, r2
 800517a:	d050      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	401a      	ands	r2, r3
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	429a      	cmp	r2, r3
 800518e:	d146      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8310 	mrs	r3, PRIMASK
 800519e:	613b      	str	r3, [r7, #16]
  return(result);
 80051a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4923      	ldr	r1, [pc, #140]	; (8005248 <UART_WaitOnFlagUntilTimeout+0x184>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80051d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d6:	2301      	movs	r3, #1
 80051d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2101      	movs	r1, #1
 80051ee:	438a      	bics	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	2120      	movs	r1, #32
 8005210:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2274      	movs	r2, #116	; 0x74
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e010      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	425a      	negs	r2, r3
 800522e:	4153      	adcs	r3, r2
 8005230:	b2db      	uxtb	r3, r3
 8005232:	001a      	movs	r2, r3
 8005234:	1dfb      	adds	r3, r7, #7
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d100      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x17a>
 800523c:	e74b      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b014      	add	sp, #80	; 0x50
 8005246:	bd80      	pop	{r7, pc}
 8005248:	fffffe5f 	.word	0xfffffe5f

0800524c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	; 0x30
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	1dbb      	adds	r3, r7, #6
 8005258:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1dba      	adds	r2, r7, #6
 8005264:	2158      	movs	r1, #88	; 0x58
 8005266:	8812      	ldrh	r2, [r2, #0]
 8005268:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1dba      	adds	r2, r7, #6
 800526e:	215a      	movs	r1, #90	; 0x5a
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	015b      	lsls	r3, r3, #5
 8005282:	429a      	cmp	r2, r3
 8005284:	d10d      	bne.n	80052a2 <UART_Start_Receive_IT+0x56>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <UART_Start_Receive_IT+0x4c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	225c      	movs	r2, #92	; 0x5c
 8005292:	4939      	ldr	r1, [pc, #228]	; (8005378 <UART_Start_Receive_IT+0x12c>)
 8005294:	5299      	strh	r1, [r3, r2]
 8005296:	e01a      	b.n	80052ce <UART_Start_Receive_IT+0x82>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	225c      	movs	r2, #92	; 0x5c
 800529c:	21ff      	movs	r1, #255	; 0xff
 800529e:	5299      	strh	r1, [r3, r2]
 80052a0:	e015      	b.n	80052ce <UART_Start_Receive_IT+0x82>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <UART_Start_Receive_IT+0x7a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <UART_Start_Receive_IT+0x70>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	225c      	movs	r2, #92	; 0x5c
 80052b6:	21ff      	movs	r1, #255	; 0xff
 80052b8:	5299      	strh	r1, [r3, r2]
 80052ba:	e008      	b.n	80052ce <UART_Start_Receive_IT+0x82>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	225c      	movs	r2, #92	; 0x5c
 80052c0:	217f      	movs	r1, #127	; 0x7f
 80052c2:	5299      	strh	r1, [r3, r2]
 80052c4:	e003      	b.n	80052ce <UART_Start_Receive_IT+0x82>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	225c      	movs	r2, #92	; 0x5c
 80052ca:	2100      	movs	r1, #0
 80052cc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	2100      	movs	r1, #0
 80052d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	; 0x22
 80052da:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052dc:	f3ef 8310 	mrs	r3, PRIMASK
 80052e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80052e2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	2301      	movs	r3, #1
 80052e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2101      	movs	r1, #1
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	015b      	lsls	r3, r3, #5
 8005316:	429a      	cmp	r2, r3
 8005318:	d107      	bne.n	800532a <UART_Start_Receive_IT+0xde>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a15      	ldr	r2, [pc, #84]	; (800537c <UART_Start_Receive_IT+0x130>)
 8005326:	665a      	str	r2, [r3, #100]	; 0x64
 8005328:	e002      	b.n	8005330 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a14      	ldr	r2, [pc, #80]	; (8005380 <UART_Start_Receive_IT+0x134>)
 800532e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2274      	movs	r2, #116	; 0x74
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005338:	f3ef 8310 	mrs	r3, PRIMASK
 800533c:	613b      	str	r3, [r7, #16]
  return(result);
 800533e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	2301      	movs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f383 8810 	msr	PRIMASK, r3
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2190      	movs	r1, #144	; 0x90
 800535a:	0049      	lsls	r1, r1, #1
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f383 8810 	msr	PRIMASK, r3
}
 800536a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b00c      	add	sp, #48	; 0x30
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	000001ff 	.word	0x000001ff
 800537c:	08005635 	.word	0x08005635
 8005380:	080054cd 	.word	0x080054cd

08005384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08e      	sub	sp, #56	; 0x38
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8310 	mrs	r3, PRIMASK
 8005390:	617b      	str	r3, [r7, #20]
  return(result);
 8005392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	2301      	movs	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f383 8810 	msr	PRIMASK, r3
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4925      	ldr	r1, [pc, #148]	; (8005444 <UART_EndRxTransfer+0xc0>)
 80053ae:	400a      	ands	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8310 	mrs	r3, PRIMASK
 80053c2:	623b      	str	r3, [r7, #32]
  return(result);
 80053c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
 80053c8:	2301      	movs	r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f383 8810 	msr	PRIMASK, r3
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	438a      	bics	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	f383 8810 	msr	PRIMASK, r3
}
 80053ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d118      	bne.n	800542a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f8:	f3ef 8310 	mrs	r3, PRIMASK
 80053fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80053fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005402:	2301      	movs	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f383 8810 	msr	PRIMASK, r3
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2110      	movs	r1, #16
 800541a:	438a      	bics	r2, r1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f383 8810 	msr	PRIMASK, r3
}
 8005428:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b00e      	add	sp, #56	; 0x38
 8005442:	bd80      	pop	{r7, pc}
 8005444:	fffffedf 	.word	0xfffffedf

08005448 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	225a      	movs	r2, #90	; 0x5a
 800545a:	2100      	movs	r1, #0
 800545c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2252      	movs	r2, #82	; 0x52
 8005462:	2100      	movs	r1, #0
 8005464:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0018      	movs	r0, r3
 800546a:	f7ff fbf1 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}

08005476 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	60bb      	str	r3, [r7, #8]
  return(result);
 8005484:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2140      	movs	r1, #64	; 0x40
 80054a0:	438a      	bics	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0018      	movs	r0, r3
 80054c0:	f7ff fbbe 	bl	8004c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b006      	add	sp, #24
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b090      	sub	sp, #64	; 0x40
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054d4:	203e      	movs	r0, #62	; 0x3e
 80054d6:	183b      	adds	r3, r7, r0
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	215c      	movs	r1, #92	; 0x5c
 80054dc:	5a52      	ldrh	r2, [r2, r1]
 80054de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	2b22      	cmp	r3, #34	; 0x22
 80054e6:	d000      	beq.n	80054ea <UART_RxISR_8BIT+0x1e>
 80054e8:	e095      	b.n	8005616 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	213c      	movs	r1, #60	; 0x3c
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80054f4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	183b      	adds	r3, r7, r0
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b2d9      	uxtb	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	400a      	ands	r2, r1
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	225a      	movs	r2, #90	; 0x5a
 800551a:	5a9b      	ldrh	r3, [r3, r2]
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b299      	uxth	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	225a      	movs	r2, #90	; 0x5a
 8005526:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	225a      	movs	r2, #90	; 0x5a
 800552c:	5a9b      	ldrh	r3, [r3, r2]
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d178      	bne.n	8005626 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	61bb      	str	r3, [r7, #24]
  return(result);
 800553a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4936      	ldr	r1, [pc, #216]	; (8005630 <UART_RxISR_8BIT+0x164>)
 8005556:	400a      	ands	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	2301      	movs	r3, #1
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2101      	movs	r1, #1
 8005588:	438a      	bics	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d12f      	bne.n	800560c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b2:	f3ef 8310 	mrs	r3, PRIMASK
 80055b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80055b8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
 80055bc:	2301      	movs	r3, #1
 80055be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f383 8810 	msr	PRIMASK, r3
}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2110      	movs	r1, #16
 80055d4:	438a      	bics	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2210      	movs	r2, #16
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d103      	bne.n	80055fa <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2258      	movs	r2, #88	; 0x58
 80055fe:	5a9a      	ldrh	r2, [r3, r2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff fb2b 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560a:	e00c      	b.n	8005626 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f7fb ff7a 	bl	8001508 <HAL_UART_RxCpltCallback>
}
 8005614:	e007      	b.n	8005626 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2108      	movs	r1, #8
 8005622:	430a      	orrs	r2, r1
 8005624:	619a      	str	r2, [r3, #24]
}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b010      	add	sp, #64	; 0x40
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	fffffedf 	.word	0xfffffedf

08005634 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800563c:	203e      	movs	r0, #62	; 0x3e
 800563e:	183b      	adds	r3, r7, r0
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	215c      	movs	r1, #92	; 0x5c
 8005644:	5a52      	ldrh	r2, [r2, r1]
 8005646:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564c:	2b22      	cmp	r3, #34	; 0x22
 800564e:	d000      	beq.n	8005652 <UART_RxISR_16BIT+0x1e>
 8005650:	e095      	b.n	800577e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	213c      	movs	r1, #60	; 0x3c
 8005658:	187b      	adds	r3, r7, r1
 800565a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800565c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005664:	187b      	adds	r3, r7, r1
 8005666:	183a      	adds	r2, r7, r0
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	4013      	ands	r3, r2
 800566e:	b29a      	uxth	r2, r3
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	225a      	movs	r2, #90	; 0x5a
 8005682:	5a9b      	ldrh	r3, [r3, r2]
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b299      	uxth	r1, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	225a      	movs	r2, #90	; 0x5a
 800568e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	225a      	movs	r2, #90	; 0x5a
 8005694:	5a9b      	ldrh	r3, [r3, r2]
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d178      	bne.n	800578e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569c:	f3ef 8310 	mrs	r3, PRIMASK
 80056a0:	617b      	str	r3, [r7, #20]
  return(result);
 80056a2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
 80056a6:	2301      	movs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4936      	ldr	r1, [pc, #216]	; (8005798 <UART_RxISR_16BIT+0x164>)
 80056be:	400a      	ands	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f383 8810 	msr	PRIMASK, r3
}
 80056cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ce:	f3ef 8310 	mrs	r3, PRIMASK
 80056d2:	623b      	str	r3, [r7, #32]
  return(result);
 80056d4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2101      	movs	r1, #1
 80056f0:	438a      	bics	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	2b01      	cmp	r3, #1
 8005712:	d12f      	bne.n	8005774 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
 800571e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005720:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005724:	2301      	movs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2110      	movs	r1, #16
 800573c:	438a      	bics	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2210      	movs	r2, #16
 8005754:	4013      	ands	r3, r2
 8005756:	2b10      	cmp	r3, #16
 8005758:	d103      	bne.n	8005762 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2210      	movs	r2, #16
 8005760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2258      	movs	r2, #88	; 0x58
 8005766:	5a9a      	ldrh	r2, [r3, r2]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff fa77 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005772:	e00c      	b.n	800578e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7fb fec6 	bl	8001508 <HAL_UART_RxCpltCallback>
}
 800577c:	e007      	b.n	800578e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2108      	movs	r1, #8
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b010      	add	sp, #64	; 0x40
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	fffffedf 	.word	0xfffffedf

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	2600      	movs	r6, #0
 80057a0:	4d0c      	ldr	r5, [pc, #48]	; (80057d4 <__libc_init_array+0x38>)
 80057a2:	4c0d      	ldr	r4, [pc, #52]	; (80057d8 <__libc_init_array+0x3c>)
 80057a4:	1b64      	subs	r4, r4, r5
 80057a6:	10a4      	asrs	r4, r4, #2
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	2600      	movs	r6, #0
 80057ae:	f000 f82b 	bl	8005808 <_init>
 80057b2:	4d0a      	ldr	r5, [pc, #40]	; (80057dc <__libc_init_array+0x40>)
 80057b4:	4c0a      	ldr	r4, [pc, #40]	; (80057e0 <__libc_init_array+0x44>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	00b3      	lsls	r3, r6, #2
 80057c2:	58eb      	ldr	r3, [r5, r3]
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	00b3      	lsls	r3, r6, #2
 80057cc:	58eb      	ldr	r3, [r5, r3]
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08005b54 	.word	0x08005b54
 80057d8:	08005b54 	.word	0x08005b54
 80057dc:	08005b54 	.word	0x08005b54
 80057e0:	08005b58 	.word	0x08005b58

080057e4 <memcpy>:
 80057e4:	2300      	movs	r3, #0
 80057e6:	b510      	push	{r4, lr}
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d100      	bne.n	80057ee <memcpy+0xa>
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	5ccc      	ldrb	r4, [r1, r3]
 80057f0:	54c4      	strb	r4, [r0, r3]
 80057f2:	3301      	adds	r3, #1
 80057f4:	e7f8      	b.n	80057e8 <memcpy+0x4>

080057f6 <memset>:
 80057f6:	0003      	movs	r3, r0
 80057f8:	1882      	adds	r2, r0, r2
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d100      	bne.n	8005800 <memset+0xa>
 80057fe:	4770      	bx	lr
 8005800:	7019      	strb	r1, [r3, #0]
 8005802:	3301      	adds	r3, #1
 8005804:	e7f9      	b.n	80057fa <memset+0x4>
	...

08005808 <_init>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr

08005814 <_fini>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr
